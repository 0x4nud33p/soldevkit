/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "utils": {
    name: "utils",
    description: "Utility functions for class name merging with clsx and tailwind-merge.",
    type: "registry:lib",
    files: [{
      path: "src/registry/lib/utils.ts",
      content: "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      type: "registry:lib",
    }],
    command: "https://soldevkit.com/r/utils.json",
  },
  "provider": {
    name: "provider",
    description: "A provider for Solana wallet connection with modal dialog, dropdown menu, and wallet management features.",
    type: "registry:ui",
    files: [{
      path: "src/registry/provider/wallet-provider.tsx",
      content: "\"use client\";\n\nimport React, { useMemo } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\n// Import wallet adapter CSS\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\ninterface WalletProviderWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function WalletProviderWrapper({\n  children,\n}: WalletProviderWrapperProps) {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = \"devnet\";\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n    [],\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/provider.json",
  },
  "button": {
    name: "button",
    description: "Displays a button or a component that looks like a button.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/button.tsx",
      content: "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/button.json",
  },
  "dialog": {
    name: "dialog",
    description: "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/dialog.tsx",
      content: "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/dialog.json",
  },
  "collapsible": {
    name: "collapsible",
    description: "An interactive component which expands/collapses a panel.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/collapsible.tsx",
      content: "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/collapsible.json",
  },
  "dropdown-menu": {
    name: "dropdown-menu",
    description: "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/dropdown-menu.tsx",
      content: "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/dropdown-menu.json",
  },
  "badge": {
    name: "badge",
    description: "Displays a badge or a component that looks like a badge.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/badge.tsx",
      content: "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/badge.json",
  },
  "wallet-connect-button": {
    name: "wallet-connect-button",
    description: "A comprehensive Solana wallet connection button with modal dialog, dropdown menu, and wallet management features.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/wallet/wallet-connect-button.tsx",
      content: "\"use client\";\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/soldevkit-ui/dialog\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/soldevkit-ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/soldevkit-ui/dropdown-menu\";\nimport { Badge } from \"@/components/soldevkit-ui/badge\";\nimport { Loader2, ChevronDown } from \"lucide-react\";\n\n// Constants\nconst LABELS = {\n  \"change-wallet\": \"Change Wallet\",\n  connecting: \"Connecting...\",\n  \"copy-address\": \"Copy Address\",\n  copied: \"Copied\",\n  disconnect: \"Disconnect\",\n  \"has-wallet\": \"Connect Wallet\",\n  \"no-wallet\": \"Select Wallet\",\n} as const;\n\n// Types\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\n  labels?: Partial<typeof LABELS>;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n};\n\n// Enhanced Wallet Modal Component\nexport const WalletModal: React.FC<{\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}> = ({ open, onOpenChange }) => {\n  const { wallets, select, connecting, connected } = useWallet();\n  const [expanded, setExpanded] = useState(false);\n\n  // Memoize wallet lists\n  const { listedWallets, collapsedWallets } = useMemo(() => {\n    const installed = wallets.filter(\n      (w) => w.readyState === WalletReadyState.Installed,\n    );\n    const notInstalled = wallets.filter(\n      (w) => w.readyState !== WalletReadyState.Installed,\n    );\n    return {\n      listedWallets: installed.length ? installed : notInstalled,\n      collapsedWallets: installed.length ? notInstalled : [],\n    };\n  }, [wallets]);\n\n  const handleWalletClick = useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\n      event.preventDefault();\n      try {\n        select(walletName as WalletName);\n        // The wallet will automatically attempt to connect after selection\n        // due to the autoConnect prop in WalletProvider\n      } catch (error) {\n        console.error(\"Failed to select wallet:\", error);\n        // You could add toast notification here\n      }\n    },\n    [select],\n  );\n\n  // Close modal when wallet connects successfully\n  useEffect(() => {\n    if (connected) {\n      onOpenChange(false);\n    }\n  }, [connected, onOpenChange]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Connect wallet to continue</DialogTitle>\n          <DialogDescription>\n            Choose your preferred wallet to connect to this dApp.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Main wallet list */}\n          {listedWallets.map((wallet) => (\n            <button\n              key={wallet.adapter.name}\n              onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n              disabled={connecting}\n              className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                {wallet.adapter.icon && (\n                  <img\n                    src={wallet.adapter.icon}\n                    alt={\`\${wallet.adapter.name} icon\`}\n                    className=\"h-5 w-5\"\n                    onError={(e) => {\n                      e.currentTarget.src = \"/placeholder.svg\";\n                    }}\n                  />\n                )}\n                <span className=\"font-medium\">{wallet.adapter.name}</span>\n                {connecting && (\n                  <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                )}\n              </div>\n              <Badge variant=\"outline\">\n                {wallet.readyState === WalletReadyState.Installed\n                  ? \"Installed\"\n                  : \"Not Installed\"}\n              </Badge>\n            </button>\n          ))}\n\n          {/* Collapsible section for additional wallets */}\n          {collapsedWallets.length > 0 && (\n            <Collapsible open={expanded} onOpenChange={setExpanded}>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <span>More wallet options</span>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2\">\n                {collapsedWallets.map((wallet) => (\n                  <button\n                    key={wallet.adapter.name}\n                    onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                    disabled={connecting}\n                    className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      {wallet.adapter.icon && (\n                        <img\n                          src={wallet.adapter.icon}\n                          alt={\`\${wallet.adapter.name} icon\`}\n                          className=\"h-5 w-5\"\n                          onError={(e) => {\n                            e.currentTarget.src = \"/placeholder.svg\";\n                          }}\n                        />\n                      )}\n                      <span className=\"font-medium\">{wallet.adapter.name}</span>\n                    </div>\n                    <Badge variant=\"outline\">\n                      {wallet.readyState === WalletReadyState.Installed\n                        ? \"Installed\"\n                        : \"Not Installed\"}\n                    </Badge>\n                  </button>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n        </div>\n\n        <DialogClose asChild>\n          <Button variant=\"outline\" className=\"w-full mt-4\">\n            Close\n          </Button>\n        </DialogClose>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Main Wallet Button Component\nexport function WalletConnectButton({\n  children,\n  labels = LABELS,\n  ...props\n}: WalletButtonProps) {\n  const [walletModalOpen, setWalletModalOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [mounted, setMounted] = useState(false);\n\n  const { publicKey, wallet, disconnect, connecting, connected } = useWallet();\n\n  const content = useMemo(() => {\n    if (!mounted) return labels[\"no-wallet\"];\n\n    if (children) {\n      return children;\n    } else if (connecting) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span>{labels[\"connecting\"]}</span>\n        </div>\n      );\n    }\n\n    // Show wallet info when connected\n    if (connected && publicKey) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {wallet?.adapter.icon && (\n            <img\n              src={wallet.adapter.icon}\n              alt={\`\${wallet.adapter.name} icon\`}\n              className=\"h-5 w-5\"\n              onError={(e) => {\n                e.currentTarget.src = \"/placeholder.svg\";\n              }}\n            />\n          )}\n          <span>\n            {\`\${publicKey.toBase58().slice(0, 6)}...\${publicKey.toBase58().slice(-4)}\`}\n          </span>\n        </div>\n      );\n    }\n\n    return labels[\"has-wallet\"];\n  }, [mounted, children, connecting, connected, publicKey, wallet, labels]);\n\n  const handleCopyAddress = useCallback(async () => {\n    if (publicKey) {\n      await navigator.clipboard.writeText(publicKey.toBase58());\n      setCopied(true);\n      setTimeout(() => setCopied(false), 400);\n    }\n  }, [publicKey]);\n\n  const handleDisconnect = useCallback(() => {\n    disconnect();\n    setMenuOpen(false);\n  }, [disconnect]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!connected) {\n    return (\n      <>\n        <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n        <Button\n          {...props}\n          onClick={() => {\n            // Try custom modal first, fallback to standard modal\n            setWalletModalOpen(true);\n            // Alternative: setVisible(true);\n          }}\n        >\n          {content}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button {...props}>{content}</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          {publicKey && (\n            <DropdownMenuItem onClick={handleCopyAddress}>\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => {\n              setWalletModalOpen(true);\n              setMenuOpen(false);\n            }}\n          >\n            {labels[\"change-wallet\"]}\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleDisconnect}>\n            {labels[\"disconnect\"]}\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/wallet-connect-button.json",
  },
  "wallet-connect-button-demo": {
    name: "wallet-connect-button-demo",
    description: "Demo showcasing Solana wallet connection with different variants.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/wallet/wallet-connect-button-demo.tsx",
      content: "import React from \"react\";\nimport { WalletConnectButton } from \"../../ui/wallet/wallet-connect-button\";\n\nfunction walletConnectButtonDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <WalletConnectButton\n        variant=\"outline\"\n        size=\"lg\"\n        className=\"w-full md:w-auto\"\n        labels={{\n          \"has-wallet\": \"Connect Wallet\",\n          connecting: \"Connecting...\",\n          disconnect: \"Disconnect\",\n          \"change-wallet\": \"Change Wallet\",\n          \"copy-address\": \"Copy Address\",\n          copied: \"Copied\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default walletConnectButtonDemo;\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/wallet/wallet-connect-button-demo.tsx")),
    source: "import React from \"react\";\nimport { WalletConnectButton } from \"../../ui/wallet/wallet-connect-button\";\n\nfunction walletConnectButtonDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <WalletConnectButton\n        variant=\"outline\"\n        size=\"lg\"\n        className=\"w-full md:w-auto\"\n        labels={{\n          \"has-wallet\": \"Connect Wallet\",\n          connecting: \"Connecting...\",\n          disconnect: \"Disconnect\",\n          \"change-wallet\": \"Change Wallet\",\n          \"copy-address\": \"Copy Address\",\n          copied: \"Copied\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default walletConnectButtonDemo;\n",
    command: "https://soldevkit.com/r/wallet-connect-button-demo.json",
  },
}