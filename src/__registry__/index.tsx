/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "utils": {
    name: "utils",
    description: "Utility functions for class name merging with clsx and tailwind-merge.",
    type: "registry:lib",
    files: [{
      path: "src/registry/lib/utils.ts",
      content: "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const validatePublicKey = (address: PublicKey | string) => {\n  try {\n    if (typeof address == \"string\") {\n      new PublicKey(address);\n    } else {\n      address.toBase58();\n    }\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const shortAddress = (address: PublicKey | string) => {\n  const key = typeof address === \"string\" ? address : address.toBase58();\n  return \`\${key.slice(0, 4)}...\${key.slice(-4)}\`;\n};\n\n// API Cache Management\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  expiry: number;\n}\n\nclass APICache {\n  private cache = new Map<string, CacheEntry<unknown>>();\n  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes\n\n  set<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + ttl,\n    });\n  }\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    if (Date.now() > entry.expiry) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data as T;\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  delete(key: string): void {\n    this.cache.delete(key);\n  }\n}\n\nexport const apiCache = new APICache();\n\n// Helius API Response Types\ninterface HeliusAssetContent {\n  metadata?: {\n    name?: string;\n    description?: string;\n    symbol?: string;\n    attributes?: Array<{\n      trait_type: string;\n      value: string | number;\n    }>;\n  };\n  files?: Array<{\n    uri?: string;\n  }>;\n  links?: {\n    image?: string;\n    external_url?: string;\n  };\n}\n\ninterface HeliusGrouping {\n  group_key: string;\n  group_value: string;\n}\n\ninterface HeliusAsset {\n  content?: HeliusAssetContent;\n  grouping?: HeliusGrouping[];\n}\n\ninterface HeliusResponse {\n  jsonrpc: string;\n  id: number;\n  result?: HeliusAsset;\n  error?: {\n    message: string;\n  };\n}\n\n// NFT Metadata Types\nexport interface NFTMetadata {\n  name?: string;\n  description?: string;\n  image?: string;\n  external_url?: string;\n  attributes?: Array<{\n    trait_type: string;\n    value: string | number;\n  }>;\n  collection?: {\n    name?: string;\n    family?: string;\n  };\n}\n\n// Jupiter API Response Types\ntype JupiterTokenResponse = TokenInfo[];\n\n// Token Types\nexport interface TokenInfo {\n  address: string;\n  name: string;\n  symbol: string;\n  logoURI?: string;\n  decimals: number;\n}\n\n// Shared Helius API Utility\nexport const fetchNFTMetadata = async (\n  mintAddress: string,\n): Promise<NFTMetadata | null> => {\n  const cacheKey = \`nft-\${mintAddress}\`;\n  const cached = apiCache.get<NFTMetadata>(cacheKey);\n  if (cached) return cached;\n\n  try {\n    const apiKey = process.env.NEXT_PUBLIC_HELIUS_API_KEY;\n    if (!apiKey) {\n      throw new Error(\"Helius API key not configured\");\n    }\n\n    const response = await fetch(\`https://mainnet.helius-rpc.com/?api-key=\${apiKey}\`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: \"1\",\n        method: \"getAsset\",\n        params: { id: mintAddress },\n      }),\n    });\n\n    if (!response.ok) throw new Error(\`HTTP error! status: \${response.status}\`);\n\n    const data: HeliusResponse = await response.json();\n    if (data.error) throw new Error(data.error.message);\n\n    const asset = data.result;\n    if (!asset) return null;\n\n    const metadata: NFTMetadata = {\n      name: asset.content?.metadata?.name || \"Unknown NFT\",\n      description: asset.content?.metadata?.description,\n      image: asset.content?.files?.[0]?.uri || asset.content?.links?.image,\n      external_url: asset.content?.links?.external_url,\n      attributes: asset.content?.metadata?.attributes?.map((attr) => ({\n        trait_type: attr.trait_type,\n        value: attr.value,\n      })),\n      collection: {\n        name: asset.grouping?.find((g) => g.group_key === \"collection\")\n          ?.group_value,\n        family: asset.content?.metadata?.symbol,\n      },\n    };\n\n    // Cache for 10 minutes\n    apiCache.set(cacheKey, metadata, 10 * 60 * 1000);\n    return metadata;\n  } catch (error) {\n    console.error(\"Error fetching NFT metadata:\", error);\n    return null;\n  }\n};\n\n// Shared Jupiter Token API Utility\nexport const fetchJupiterTokens = async (): Promise<TokenInfo[]> => {\n  const cacheKey = \"jupiter-tokens\";\n  const cached = apiCache.get<TokenInfo[]>(cacheKey);\n  if (cached) return cached;\n\n  try {\n    const response = await fetch(\"https://tokens.jup.ag/tokens?tags=verified\");\n\n    if (!response.ok) {\n      throw new Error(\`HTTP error! status: \${response.status}\`);\n    }\n\n    const tokens: JupiterTokenResponse = await response.json();\n\n    // Cache for 30 minutes\n    apiCache.set(cacheKey, tokens, 30 * 60 * 1000);\n    return tokens;\n  } catch (error) {\n    console.error(\"Error fetching Jupiter tokens:\", error);\n    return [];\n  }\n};\n\n// Find token by address or symbol\nexport const findToken = async (\n  addressOrSymbol: string,\n): Promise<TokenInfo | null> => {\n  const tokens = await fetchJupiterTokens();\n  return (\n    tokens.find(\n      (t) =>\n        t.address.toLowerCase() === addressOrSymbol.toLowerCase() ||\n        t.symbol.toLowerCase() === addressOrSymbol.toLowerCase(),\n    ) || null\n  );\n};\n\n// NFT Price Types\nexport interface NFTPrice {\n  price: number;\n  currency: string;\n  marketplace: string;\n  lastSale?: number;\n  floorPrice?: number;\n}\n\n\n\n\n\n// Fetch NFT price using Helius API with demo fallback\nexport const fetchNFTPrice = async (\n  mintAddress: string,\n): Promise<NFTPrice | null> => {\n  const cacheKey = \`nft-price-\${mintAddress}\`;\n  const cached = apiCache.get<NFTPrice>(cacheKey);\n  if (cached) return cached;\n\n  try {\n    console.log(\`Fetching price for NFT: \${mintAddress}\`);\n    \n    const apiKey = process.env.NEXT_PUBLIC_HELIUS_API_KEY;\n    if (!apiKey) {\n      console.log('No Helius API key found, returning demo price');\n      const demoPrice: NFTPrice = {\n        price: 1.5 + Math.random() * 3, // Random price between 1.5-4.5 SOL for demo\n        currency: \"SOL\",\n        marketplace: \"Demo\",\n      };\n      apiCache.set(cacheKey, demoPrice, 2 * 60 * 1000); // Cache for 2 minutes\n      return demoPrice;\n    }\n\n    // Try to get asset info from Helius\n    const response = await fetch(\`https://mainnet.helius-rpc.com/?api-key=\${apiKey}\`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: \"1\",\n        method: \"getAsset\",\n        params: { id: mintAddress },\n      }),\n    });\n\n    if (response.ok) {\n      const data: HeliusResponse = await response.json();\n      console.log('Helius asset response:', data);\n      \n      // Since Helius DAS doesn't directly provide pricing, we'll generate a realistic demo price\n      // based on the NFT's metadata and collection info\n      const asset = data.result;\n      let basePrice = 1.0; // Default base price\n      \n      if (asset?.content?.metadata?.name) {\n        // Generate price based on name characteristics (for demo purposes)\n        const name = asset.content.metadata.name.toLowerCase();\n        if (name.includes('rare') || name.includes('legendary')) {\n          basePrice = 5.0 + Math.random() * 10;\n        } else if (name.includes('epic') || name.includes('special')) {\n          basePrice = 2.0 + Math.random() * 5;\n        } else {\n          basePrice = 0.5 + Math.random() * 2;\n        }\n      }\n      \n      const priceData: NFTPrice = {\n        price: Math.round(basePrice * 100) / 100, // Round to 2 decimal places\n        currency: \"SOL\",\n        marketplace: \"Helius Demo\",\n      };\n      \n      console.log('Generated demo price based on metadata:', priceData);\n      // Cache for 5 minutes\n      apiCache.set(cacheKey, priceData, 5 * 60 * 1000);\n      return priceData;\n    }\n\n    console.log('Failed to fetch from Helius, returning fallback price');\n    \n    // Return a fallback demo price\n    const fallbackPrice: NFTPrice = {\n      price: 1.0 + Math.random() * 2, // Random price between 1.0-3.0 SOL\n      currency: \"SOL\",\n      marketplace: \"Fallback\",\n    };\n    \n    console.log('Returning fallback price:', fallbackPrice);\n    // Cache fallback price for 2 minutes\n    apiCache.set(cacheKey, fallbackPrice, 2 * 60 * 1000);\n    return fallbackPrice;\n  } catch (error) {\n    console.error(\"Error fetching NFT price:\", error);\n    \n    // Return a simple demo price on error\n    const errorPrice: NFTPrice = {\n      price: 1.5,\n      currency: \"SOL\",\n      marketplace: \"Error Fallback\",\n    };\n    \n    return errorPrice;\n  }\n};\n",
      type: "registry:lib",
    }],
    command: "https://soldevkit.com/r/utils.json",
  },
  "provider": {
    name: "provider",
    description: "A provider for Solana wallet connection with modal dialog, dropdown menu, and wallet management features.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/provider/wallet-provider.tsx",
      content: "\"use client\";\n\nimport React, { useMemo } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// Import wallet adapter CSS\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\ninterface WalletProviderWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function WalletProviderWrapper({\n  children,\n}: WalletProviderWrapperProps) {\n  // Fallback to public cluster if env not set\n  const endpoint = useMemo(\n    () =>\n      process.env.NEXT_PUBLIC_ALCHEMY_RPC_URL ||\n      \"https://api.devnet.solana.com\",\n    [],\n  );\n\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n    [],\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/provider.json",
  },
  "button": {
    name: "button",
    description: "Displays a button or a component that looks like a button.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/button.tsx",
      content: "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/button.json",
  },
  "dialog": {
    name: "dialog",
    description: "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/dialog.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean;\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/dialog.json",
  },
  "collapsible": {
    name: "collapsible",
    description: "An interactive component which expands/collapses a panel.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/collapsible.tsx",
      content: "\"use client\";\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />;\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  );\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/collapsible.json",
  },
  "dropdown-menu": {
    name: "dropdown-menu",
    description: "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/dropdown-menu.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  );\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  );\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: \"default\" | \"destructive\";\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/dropdown-menu.json",
  },
  "badge": {
    name: "badge",
    description: "Displays a badge or a component that looks like a badge.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/badge.tsx",
      content: "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/badge.json",
  },
  "error-boundary": {
    name: "error-boundary",
    description: "Error boundary components for handling UI errors and API failures with retry functionality.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/error-boundary/error-boundary.tsx",
      content: "\"use client\";\n\nimport React, { Component, ReactNode } from \"react\";\nimport { AlertTriangle, RefreshCw } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  className?: string;\n}\n\nexport class ErrorBoundary extends Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"ErrorBoundary caught an error:\", error, errorInfo);\n\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Call the onError callback if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div\n          className={cn(\n            \"flex flex-col items-center justify-center p-6 bg-destructive/10 border border-destructive/20 rounded-lg\",\n            this.props.className,\n          )}\n        >\n          <AlertTriangle className=\"h-8 w-8 text-destructive mb-4\" />\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n            Something went wrong\n          </h3>\n          <p className=\"text-sm text-muted-foreground text-center mb-4\">\n            {this.state.error?.message ||\n              \"An unexpected error occurred while loading this component.\"}\n          </p>\n          <button\n            onClick={this.handleRetry}\n            className=\"inline-flex items-center px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Try Again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Hook-based error boundary for functional components\nexport const useErrorHandler = () => {\n  const [error, setError] = React.useState<Error | null>(null);\n\n  const resetError = React.useCallback(() => {\n    setError(null);\n  }, []);\n\n  const handleError = React.useCallback((error: Error) => {\n    console.error(\"Error caught by useErrorHandler:\", error);\n    setError(error);\n  }, []);\n\n  React.useEffect(() => {\n    if (error) {\n      throw error;\n    }\n  }, [error]);\n\n  return { handleError, resetError, error };\n};\n\n// API Error Boundary specifically for API-related errors\ninterface APIErrorBoundaryProps {\n  children: ReactNode;\n  onRetry?: () => void;\n  className?: string;\n}\n\nexport const APIErrorBoundary: React.FC<APIErrorBoundaryProps> = ({\n  children,\n  onRetry,\n  className,\n}) => {\n  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {\n    // Log API errors for monitoring\n    console.error(\"API Error:\", {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n    });\n  };\n\n  const fallback = (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center p-4 bg-muted/50 border border-border rounded-lg\",\n        className,\n      )}\n    >\n      <AlertTriangle className=\"h-6 w-6 text-muted-foreground mb-2\" />\n      <p className=\"text-sm text-muted-foreground text-center mb-3\">\n        Failed to load data. Please check your connection and try again.\n      </p>\n      {onRetry && (\n        <button\n          onClick={onRetry}\n          className=\"inline-flex items-center px-3 py-1.5 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-colors\"\n        >\n          <RefreshCw className=\"h-3 w-3 mr-1\" />\n          Retry\n        </button>\n      )}\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallback={fallback}\n      onError={handleError}\n      className={className}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/error-boundary.json",
  },
  "wallet-connect-button": {
    name: "wallet-connect-button",
    description: "A comprehensive Solana wallet connection button with modal dialog, dropdown menu, and wallet management features.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/wallet/wallet-connect-button.tsx",
      content: "\"use client\";\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\";\nimport { Button } from \"@/components/soldevkit-ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/soldevkit-ui/dialog\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/soldevkit-ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/soldevkit-ui/dropdown-menu\";\nimport { Badge } from \"@/components/soldevkit-ui/badge\";\nimport { Loader2, ChevronDown } from \"lucide-react\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\n// Constants\nconst LABELS = {\n  \"change-wallet\": \"Change Wallet\",\n  connecting: \"Connecting...\",\n  \"copy-address\": \"Copy Address\",\n  copied: \"Copied\",\n  disconnect: \"Disconnect\",\n  \"has-wallet\": \"Connect Wallet\",\n  \"no-wallet\": \"Select Wallet\",\n} as const;\n\n// Types\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\n  labels?: Partial<Record<keyof typeof LABELS, string>>;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  icon?: React.ReactNode;\n};\n\n// Enhanced Wallet Modal Component\nexport const WalletModal: React.FC<{\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}> = ({ open, onOpenChange }) => {\n  const { wallets, select, connecting, connected } = useWallet();\n  const [expanded, setExpanded] = useState(false);\n\n  // Memoize wallet lists\n  const { listedWallets, collapsedWallets } = useMemo(() => {\n    const installed = wallets.filter(\n      (w) => w.readyState === WalletReadyState.Installed,\n    );\n    const notInstalled = wallets.filter(\n      (w) => w.readyState !== WalletReadyState.Installed,\n    );\n    return {\n      listedWallets: installed.length ? installed : notInstalled,\n      collapsedWallets: installed.length ? notInstalled : [],\n    };\n  }, [wallets]);\n\n  const handleWalletClick = useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\n      event.preventDefault();\n      try {\n        select(walletName as WalletName);\n        // The wallet will automatically attempt to connect after selection\n        // due to the autoConnect prop in WalletProvider\n      } catch (error) {\n        console.error(\"Failed to select wallet:\", error);\n        // You could add toast notification here\n      }\n    },\n    [select],\n  );\n\n  // Close modal when wallet connects successfully\n  useEffect(() => {\n    if (connected) {\n      onOpenChange(false);\n    }\n  }, [connected, onOpenChange]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Connect wallet to continue</DialogTitle>\n          <DialogDescription>\n            Choose your preferred wallet to connect to this dApp.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Main wallet list */}\n          {listedWallets.map((wallet) => (\n            <button\n              key={wallet.adapter.name}\n              onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n              disabled={connecting}\n              className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                {wallet.adapter.icon && (\n                  <OptimizedImage\n                    src={wallet.adapter.icon}\n                    alt={\`\${wallet.adapter.name} icon\`}\n                    className=\"h-5 w-5\"\n                    fallbackSrc=\"/placeholder.svg\"\n                    lazy={false}\n                  />\n                )}\n                <span className=\"font-medium\">{wallet.adapter.name}</span>\n                {connecting && (\n                  <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                )}\n              </div>\n              <Badge variant=\"outline\">\n                {wallet.readyState === WalletReadyState.Installed\n                  ? \"Installed\"\n                  : \"Not Installed\"}\n              </Badge>\n            </button>\n          ))}\n\n          {/* Collapsible section for additional wallets */}\n          {collapsedWallets.length > 0 && (\n            <Collapsible open={expanded} onOpenChange={setExpanded}>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <span>More wallet options</span>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2\">\n                {collapsedWallets.map((wallet) => (\n                  <button\n                    key={wallet.adapter.name}\n                    onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                    disabled={connecting}\n                    className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      {wallet.adapter.icon && (\n                        <OptimizedImage\n                          src={wallet.adapter.icon}\n                          alt={\`\${wallet.adapter.name} icon\`}\n                          className=\"h-5 w-5\"\n                          fallbackSrc=\"/placeholder.svg\"\n                          lazy={false}\n                        />\n                      )}\n                      <span className=\"font-medium\">{wallet.adapter.name}</span>\n                    </div>\n                    <Badge variant=\"outline\">\n                      {wallet.readyState === WalletReadyState.Installed\n                        ? \"Installed\"\n                        : \"Not Installed\"}\n                    </Badge>\n                  </button>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n        </div>\n\n        <DialogClose asChild>\n          <Button variant=\"outline\" className=\"w-full mt-4\">\n            Close\n          </Button>\n        </DialogClose>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Main Wallet Button Component\nexport function WalletConnectButton({\n  children,\n  labels = LABELS,\n  icon,\n  ...props\n}: WalletButtonProps) {\n  const [walletModalOpen, setWalletModalOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [mounted, setMounted] = useState(false);\n\n  const { publicKey, wallet, disconnect, connecting, connected } = useWallet();\n\n  const content = useMemo(() => {\n    if (!mounted) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          <span>{labels[\"no-wallet\"]}</span>\n        </div>\n      );\n    }\n\n    if (children) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          {children}\n        </div>\n      );\n    } else if (connecting) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span>{labels[\"connecting\"]}</span>\n        </div>\n      );\n    }\n\n    // Show wallet info when connected\n    if (connected && publicKey) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          {wallet?.adapter.icon && (\n            <OptimizedImage\n              src={wallet.adapter.icon}\n              alt={\`\${wallet.adapter.name} icon\`}\n              className=\"h-5 w-5\"\n              fallbackSrc=\"/placeholder.svg\"\n              lazy={false}\n            />\n          )}\n          <span>\n            {\`\${publicKey.toBase58().slice(0, 6)}...\${publicKey.toBase58().slice(-4)}\`}\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center gap-2\">\n        {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n        <span>{labels[\"has-wallet\"]}</span>\n      </div>\n    );\n  }, [\n    mounted,\n    children,\n    connecting,\n    connected,\n    publicKey,\n    wallet,\n    labels,\n    icon,\n  ]);\n\n  const handleCopyAddress = useCallback(async () => {\n    if (publicKey) {\n      await navigator.clipboard.writeText(publicKey.toBase58());\n      setCopied(true);\n      setTimeout(() => setCopied(false), 400);\n    }\n  }, [publicKey]);\n\n  const handleDisconnect = useCallback(() => {\n    disconnect();\n    setMenuOpen(false);\n  }, [disconnect]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!connected) {\n    return (\n      <>\n        <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n        <Button\n          {...props}\n          onClick={() => {\n            // Try custom modal first, fallback to standard modal\n            setWalletModalOpen(true);\n            // Alternative: setVisible(true);\n          }}\n        >\n          {content}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button {...props}>{content}</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          {publicKey && (\n            <DropdownMenuItem onClick={handleCopyAddress}>\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => {\n              setWalletModalOpen(true);\n              setMenuOpen(false);\n            }}\n          >\n            {labels[\"change-wallet\"]}\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleDisconnect}>\n            {labels[\"disconnect\"]}\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/wallet-connect-button.json",
  },
  "input": {
    name: "input",
    description: "Displays a form input field or a component that looks like an input field.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/input.tsx",
      content: "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/input.json",
  },
  "form": {
    name: "form",
    description: "Form components (Form, FormField, FormItem, FormLabel, FormMessage) built on react-hook-form.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/form.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/soldevkit-ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState } = useFormContext();\n  const formState = useFormState({ name: fieldContext.name });\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: \`\${id}-form-item\`,\n    formDescriptionId: \`\${id}-form-item-description\`,\n    formMessageId: \`\${id}-form-item-message\`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? \`\${formDescriptionId}\`\n          : \`\${formDescriptionId} \${formMessageId}\`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  );\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField();\n  const body = error ? String(error?.message ?? \"\") : props.children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/form.json",
  },
  "select": {
    name: "select",
    description: "A set of components for building accessible select menus.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/select.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\";\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\",\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/select.json",
  },
  "card": {
    name: "card",
    description: "A card component with header and content elements.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/card.tsx",
      content: "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/card.json",
  },
  "pk-input": {
    name: "pk-input",
    description: "A specialized input component for Solana public key validation with real-time validation feedback.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/pk/pk-input.tsx",
      content: "\"use client\";\nimport React from \"react\";\n\nimport { validatePublicKey, cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/soldevkit-ui/input\";\n\nexport const PKInput = ({\n  ...props\n}: React.ComponentPropsWithoutRef<\"input\">) => {\n  const [value, setValue] = React.useState(\"\");\n  const [isInvalid, setIsInvalid] = React.useState(false);\n  const [hasBlurred, setHasBlurred] = React.useState(false);\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const validateField = React.useCallback(() => {\n    const isValid = validatePublicKey(value);\n    if (inputRef.current) {\n      if (!isValid) {\n        inputRef.current.setCustomValidity(\"Invalid public key\");\n      } else {\n        inputRef.current.setCustomValidity(\"\");\n      }\n      setIsInvalid(!inputRef.current.validity.valid);\n    }\n  }, [value]);\n  const handleBlur = React.useCallback(() => {\n    setHasBlurred(true);\n    validateField();\n  }, [validateField]);\n\n  React.useEffect(() => {\n    if (hasBlurred) {\n      validateField();\n    }\n  }, [value, validateField, hasBlurred]);\n  return (\n    <Input\n      ref={inputRef}\n      type=\"text\"\n      {...props}\n      className={cn(\n        \"outline-none\",\n        props.className,\n        isInvalid && \"border-destructive focus-visible:ring-destructive\",\n      )}\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onBlur={handleBlur}\n      aria-invalid={isInvalid}\n    />\n  );\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/pk-input.json",
  },
  "toggle": {
    name: "toggle",
    description: "A two-state button that can be either on or off.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/toggle.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Toggle, toggleVariants };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/toggle.json",
  },
  "toggle-group": {
    name: "toggle-group",
    description: "A set of two-state buttons that can be toggled on or off.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/toggle-group.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\nimport { toggleVariants } from \"@/registry/soldevkit-ui/toggle\";\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n});\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        \"group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs\",\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  );\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext);\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        \"min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n}\n\nexport { ToggleGroup, ToggleGroupItem };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/toggle-group.json",
  },
  "txn-settings": {
    name: "txn-settings",
    description: "A comprehensive transaction settings dialog with priority fee, slippage, and other configuration options.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/transaction/txn-settings.tsx",
      content: "\"use client\";\nimport React from \"react\";\n\nimport { SettingsIcon } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogTrigger,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/soldevkit-ui/dialog\";\nimport { Input } from \"@/components/soldevkit-ui/input\";\nimport { Button } from \"@/components/soldevkit-ui/button\";\nimport {\n  ToggleGroup,\n  ToggleGroupItem,\n} from \"@/components/soldevkit-ui/toggle-group\";\ntype TxnSettingsType = {\n  priority: string;\n  priorityFeeCap: \"dynamic\" | number;\n  slippageMode: \"dynamic\" | \"fixed\";\n  slippageValue: number;\n};\n\ntype TxnSettingsContextType = {\n  settings: TxnSettingsType;\n  updateSettings: (newSettings: Partial<TxnSettingsType>) => void;\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst TxnSettingsContext = React.createContext<\n  TxnSettingsContextType | undefined\n>(undefined);\n\nconst TxnSettingsProvider: React.FC<{\n  children: React.ReactNode;\n}> = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [settings, setSettings] = React.useState<TxnSettingsType>({\n    priority: \"normal\",\n    priorityFeeCap: \"dynamic\",\n    slippageMode: \"dynamic\",\n    slippageValue: 1.0,\n  });\n\n  const updateSettings = (newSettings: Partial<TxnSettingsType>) => {\n    setSettings((prevSettings) => ({ ...prevSettings, ...newSettings }));\n  };\n\n  return (\n    <TxnSettingsContext.Provider\n      value={{ settings, updateSettings, isOpen, setIsOpen }}\n    >\n      {children}\n    </TxnSettingsContext.Provider>\n  );\n};\n\nconst useTxnSettings = () => {\n  const context = React.useContext(TxnSettingsContext);\n  if (context === undefined) {\n    throw new Error(\"useTxnSettings must be used within a TxnSettingsProvider\");\n  }\n  return context;\n};\n\ntype TxnSettingsProps = {\n  trigger?: React.ReactNode;\n};\nconst TxnSettings = ({ trigger }: TxnSettingsProps) => {\n  const { settings, updateSettings, isOpen, setIsOpen } = useTxnSettings();\n  const [tempSettings, setTempSettings] =\n    React.useState<TxnSettingsType>(settings);\n  const [manualFee, setManualFee] = React.useState(\"\");\n  const [manualSlippage, setManualSlippage] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (isOpen) {\n      setTempSettings(settings);\n    }\n  }, [isOpen, settings]);\n\n  const handleSave = () => {\n    updateSettings(tempSettings);\n    setIsOpen(false);\n  };\n\n  const handleCancel = () => {\n    setTempSettings(settings);\n    setIsOpen(false);\n  };\n\n  const handleSlippagePresetChange = (value: string) => {\n    const slippageMap: Record<string, number> = {\n      low: 0.5,\n      normal: 1.0,\n      high: 1.5,\n    };\n\n    setTempSettings((prev) => ({\n      ...prev,\n      slippageValue: slippageMap[value] || prev.slippageValue,\n    }));\n  };\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button variant=\"outline\" className=\"cursor-pointer\" size=\"icon\">\n            <SettingsIcon size={16} />\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Transaction Settings</DialogTitle>\n        </DialogHeader>\n        <form\n          className=\"space-y-10 py-4\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleSave();\n          }}\n        >\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Priority fee</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set the priority fee for your transactions.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={tempSettings.priority}\n              onValueChange={(value) =>\n                setTempSettings((prev) => ({ ...prev, priority: value }))\n              }\n            >\n              <ToggleGroupItem value=\"normal\">Normal</ToggleGroupItem>\n              <ToggleGroupItem value=\"medium\">Medium</ToggleGroupItem>\n              <ToggleGroupItem value=\"turbo\">Turbo</ToggleGroupItem>\n            </ToggleGroup>\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Priority fee cap</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set the priority fee cap for your transactions.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={\n                tempSettings.priorityFeeCap === \"dynamic\" ? \"dynamic\" : \"manual\"\n              }\n              onValueChange={(value) => {\n                if (value === \"dynamic\") {\n                  setTempSettings((prev) => ({\n                    ...prev,\n                    priorityFeeCap: \"dynamic\",\n                  }));\n                } else if (value === \"manual\") {\n                  setTempSettings((prev) => ({ ...prev, priorityFeeCap: 0 }));\n                }\n              }}\n            >\n              <ToggleGroupItem value=\"manual\">Manual</ToggleGroupItem>\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\n            </ToggleGroup>\n            {tempSettings.priorityFeeCap !== \"dynamic\" && (\n              <Input\n                type=\"number\"\n                placeholder=\"Enter priority fee cap\"\n                value={manualFee}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setManualFee(value);\n                  const numValue = parseFloat(value);\n                  if (!isNaN(numValue)) {\n                    setTempSettings((prev) => ({\n                      ...prev,\n                      priorityFeeCap: numValue,\n                    }));\n                  }\n                }}\n                className=\"mt-2\"\n              />\n            )}\n          </div>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Slippage mode</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Set a fixed slippage or let us calculate optimal slippage for\n                you.\n              </p>\n            </div>\n            <ToggleGroup\n              type=\"single\"\n              className=\"justify-start\"\n              value={tempSettings.slippageMode}\n              onValueChange={(value) => {\n                if (value) {\n                  setTempSettings((prev) => ({\n                    ...prev,\n                    slippageMode: value as \"dynamic\" | \"fixed\",\n                  }));\n                }\n              }}\n            >\n              <ToggleGroupItem value=\"dynamic\">Dynamic</ToggleGroupItem>\n              <ToggleGroupItem value=\"fixed\">Fixed</ToggleGroupItem>\n            </ToggleGroup>\n\n            {tempSettings.slippageMode === \"fixed\" && (\n              <div className=\"mt-4 space-y-4\">\n                <ToggleGroup\n                  type=\"single\"\n                  className=\"justify-start\"\n                  value={\n                    tempSettings.slippageValue === 0.5\n                      ? \"low\"\n                      : tempSettings.slippageValue === 1.0\n                        ? \"normal\"\n                        : tempSettings.slippageValue === 1.5\n                          ? \"high\"\n                          : \"custom\"\n                  }\n                  onValueChange={(value) => {\n                    if (value && value !== \"custom\") {\n                      handleSlippagePresetChange(value);\n                    }\n                  }}\n                >\n                  <ToggleGroupItem value=\"low\" className=\"h-auto w-full py-1\">\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>Low</span>\n                      <span className=\"text-sm\">0.5 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                  <ToggleGroupItem\n                    value=\"normal\"\n                    className=\"h-auto w-full py-1\"\n                  >\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>Normal</span>\n                      <span className=\"text-sm\">1 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                  <ToggleGroupItem value=\"high\" className=\"h-auto w-full py-1\">\n                    <div className=\"flex w-full flex-col items-center\">\n                      <span>High</span>\n                      <span className=\"text-sm\">1.5 %</span>\n                    </div>\n                  </ToggleGroupItem>\n                </ToggleGroup>\n\n                <div>\n                  <p className=\"mb-2 text-sm\">Or set manually</p>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"0\"\n                      value={manualSlippage}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setManualSlippage(value);\n                        const numValue = parseFloat(value);\n                        if (!isNaN(numValue)) {\n                          setTempSettings((prev) => ({\n                            ...prev,\n                            slippageValue: numValue,\n                          }));\n                        }\n                      }}\n                      className=\"pr-8\"\n                    />\n                    <span className=\"absolute right-3 top-1/2 -translate-y-1/2 transform\">\n                      %\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button\n                className=\"cursor-pointer\"\n                variant=\"outline\"\n                onClick={handleCancel}\n              >\n                Cancel\n              </Button>\n            </DialogClose>\n            <Button className=\"cursor-pointer\" type=\"submit\">\n              Save\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\nexport { TxnSettingsProvider, TxnSettings, useTxnSettings };\nexport type { TxnSettingsType };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/txn-settings.json",
  },
  "table": {
    name: "table",
    description: "A responsive table component with header, body, footer, and cell components.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/table.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  );\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/table.json",
  },
  "skeleton": {
    name: "skeleton",
    description: "Use to show a placeholder while content is loading.",
    type: "registry:ui",
    files: [{
      path: "src/registry/soldevkit-ui/skeleton.tsx",
      content: "import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/skeleton.json",
  },
  "txn-list": {
    name: "txn-list",
    description: "A component for displaying a list of Solana transactions with details like signature, block, time, sender, and fee.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/transaction/txn-list.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\n\nimport {\n  VersionedTransactionResponse,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { AlertCircleIcon, ExternalLinkIcon } from \"lucide-react\";\n\nimport { shortAddress, cn } from \"@/lib/utils\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/soldevkit-ui/table\";\n\n\ntype TxnListProps = {\n  transactions: VersionedTransactionResponse[];\n  onClick?: (txn: VersionedTransactionResponse) => void;\n};\n\nconst TxnList = ({ transactions, onClick }: TxnListProps) => {\n  const { connection } = useConnection();\n  const [currentSlot, setCurrentSlot] = React.useState<number | null>(null);\n  const [averageBlockTime, setAverageBlockTime] = React.useState<number>(0.4);\n\n  React.useEffect(() => {\n    const init = async () => {\n      try {\n        const [slot, recentPerformanceSamples] = await Promise.all([\n          connection.getSlot(),\n          connection.getRecentPerformanceSamples(30),\n        ]);\n\n        const totalSampleSeconds = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.samplePeriodSecs,\n          0,\n        );\n        const totalSamples = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.numSlots,\n          0,\n        );\n        const calculatedAverageBlockTime = totalSampleSeconds / totalSamples;\n\n        setCurrentSlot(slot);\n        setAverageBlockTime(calculatedAverageBlockTime);\n      } catch (error) {\n        console.error(\"Error fetching block time:\", error);\n      }\n    };\n\n    if (!connection) return;\n    init();\n  }, [connection]);\n\n  const estimateTimestamp = (blockTime: number | null | undefined) => {\n    if (blockTime === null || blockTime === undefined || currentSlot === null) {\n      return \"Unknown\";\n    }\n    const currentTime = Date.now() / 1000;\n    const blockDifference = currentSlot - blockTime;\n    const estimatedTimestamp = currentTime - blockDifference * averageBlockTime;\n    return formatDistanceToNow(new Date(estimatedTimestamp * 1000), {\n      addSuffix: true,\n    });\n  };\n\n  if (transactions.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        Loading transactions...\n      </div>\n    );\n  }\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow className=\"hover:bg-transparent\">\n          <TableHead>Signature</TableHead>\n          <TableHead>Block</TableHead>\n          <TableHead>Time</TableHead>\n          <TableHead>By</TableHead>\n          <TableHead>Fee</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {transactions.map((txn) => (\n          <TableRow\n            key={txn.transaction.signatures[0]}\n            className={cn(\n              \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\n              onClick && \"cursor-pointer\",\n            )}\n            onClick={() => onClick && onClick(txn)}\n          >\n            <TableCell>\n              <Link\n                href={\`https://solscan.io/tx/\${txn.transaction.signatures[0]}\`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"group inline-flex items-center gap-1\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <ExternalLinkIcon size={16} />\n                <span className=\"border-b border-transparent group-hover:border-border\">\n                  {shortAddress(txn.transaction.signatures[0])}\n                </span>\n                {txn.meta?.err && (\n                  <AlertCircleIcon className=\"h-4 w-4 text-destructive\" />\n                )}\n              </Link>\n            </TableCell>\n            <TableCell>{txn.blockTime}</TableCell>\n            <TableCell>{estimateTimestamp(txn.slot)}</TableCell>\n            <TableCell>\n              <Link\n                href={\`https://solscan.io/account/\${txn.transaction.message.staticAccountKeys[0]}\`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"group inline-flex items-center gap-1\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <ExternalLinkIcon size={16} />\n                <span className=\"border-b border-transparent group-hover:border-border\">\n                  {shortAddress(txn.transaction.message.staticAccountKeys[0])}\n                </span>\n              </Link>\n            </TableCell>\n            <TableCell>{(txn.meta?.fee || 0) / LAMPORTS_PER_SOL}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default TxnList;\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/txn-list.json",
  },
  "avatar": {
    name: "avatar",
    description: "A component for displaying Solana address avatars using Minidenticons with customizable sizes and styling.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/avatar/avatar.tsx",
      content: "import React from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { minidenticon } from \"minidenticons\";\nimport { cn } from \"@/lib/utils\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\ntype AvatarProps = {\n  address?: PublicKey | string; // allow optional\n  size?: number;\n  className?: string;\n  alt?: string;\n};\n\nconst Avatar = ({ address, size = 48, className, alt }: AvatarProps) => {\n  const pubkeyStr = React.useMemo(() => {\n    if (!address) return \"\";\n    return typeof address === \"string\" ? address : address.toBase58();\n  }, [address]);\n\n  const identicon = React.useMemo(() => {\n    if (!pubkeyStr) return \"\";\n    return (\n      \"data:image/svg+xml;utf8,\" +\n      encodeURIComponent(minidenticon(pubkeyStr, 90, 50))\n    );\n  }, [pubkeyStr]);\n\n  if (!pubkeyStr) {\n    return (\n      <div\n        className={cn(\n          \"relative flex items-center justify-center rounded-full bg-muted p-1 text-muted-foreground\",\n          className,\n        )}\n        style={{ width: size, height: size }}\n      >\n        <span className=\"text-xs\">?</span>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative flex items-center justify-center rounded-full bg-muted p-1 text-muted-foreground\",\n        className,\n      )}\n      style={{ width: size, height: size }}\n    >\n      <OptimizedImage\n        src={identicon}\n        alt={alt || pubkeyStr}\n        width={size}\n        height={size}\n        fallbackSrc=\"/placeholder-avatar.png\"\n        lazy={false}\n      />\n    </div>\n  );\n};\n\nexport { Avatar };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/avatar.json",
  },
  "send-token": {
    name: "send-token",
    description: "A form component for sending SPL tokens on Solana with validation and transaction handling.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/token/send-token.tsx",
      content: "\"use client\";\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { ArrowRight, Loader2, Wallet } from \"lucide-react\";\nimport {\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport {\n  createTransferInstruction,\n  getAssociatedTokenAddress,\n} from \"@solana/spl-token\";\nimport {\n  TokenListProvider,\n  TokenInfo as RegistryTokenInfo,\n} from \"@solana/spl-token-registry\";\n\nimport { Button } from \"@/components/soldevkit-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/soldevkit-ui/form\";\nimport { Input } from \"@/components/soldevkit-ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n} from \"@/components/soldevkit-ui/select\";\nimport { WalletConnectButton } from \"@/components/soldevkit-ui/wallet/wallet-connect-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/soldevkit-ui/card\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\n// Type for our form values\ntype FormValues = {\n  destination: string;\n  amount: number | undefined;\n  token: string;\n};\n\n// Custom token info type\nexport type TokenInfo = {\n  id: string;\n  symbol: string;\n  name: string;\n  balance: number;\n  decimals: number;\n  mintAddress?: string;\n  icon?: string;\n};\n\n// Type for form validation errors\ntype FormError = {\n  type: string;\n  message: string;\n};\n\n// Type for resolver return value\ntype ResolverResult = {\n  values: FormValues | Record<string, never>;\n  errors: Record<string, FormError>;\n};\n\n// Custom resolver for form validation\nconst customResolver = (data: FormValues): ResolverResult => {\n  const errors: Record<string, FormError> = {};\n\n  if (!data.destination) {\n    errors.destination = {\n      type: \"required\",\n      message: \"Destination address is required\",\n    };\n  } else if (data.destination.length < 32) {\n    errors.destination = {\n      type: \"minLength\",\n      message: \"Destination address must be a valid Solana address\",\n    };\n  }\n\n  if (data.amount === undefined || data.amount === null) {\n    errors.amount = {\n      type: \"required\",\n      message: \"Amount is required\",\n    };\n  } else if (data.amount <= 0) {\n    errors.amount = {\n      type: \"min\",\n      message: \"Amount must be greater than 0\",\n    };\n  }\n\n  if (!data.token) {\n    errors.token = {\n      type: \"required\",\n      message: \"Please select a token\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport interface SendTokenFormProps {\n  onSendToken?: (values: FormValues) => Promise<void>;\n  tokens?: TokenInfo[];\n  isLoading?: boolean;\n  showTokenBalance?: boolean;\n  validateDestination?: (address: string) => Promise<boolean>;\n  className?: string;\n}\n\nexport function SendTokenForm({\n  tokens,\n  isLoading = false,\n  showTokenBalance = true,\n  className,\n}: SendTokenFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedToken, setSelectedToken] = useState<TokenInfo | null>(null);\n  const [isLoadingTokens, setIsLoadingTokens] = useState(false);\n  const [isUpdatingBalance] = useState(false);\n  const { publicKey, connected, sendTransaction } = useWallet();\n  const { connection } = useConnection();\n  const [amountValue, setAmountValue] = useState<string>(\"\");\n\n  const form = useForm<FormValues>({\n    defaultValues: {\n      destination: \"\",\n      amount: undefined,\n      token: \"\",\n    },\n    resolver: customResolver,\n  });\n\n  const [availableTokens, setAvailableTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, RegistryTokenInfo>>(\n    new Map(),\n  );\n\n  // Load token registry once\n  useEffect(() => {\n    new TokenListProvider().resolve().then((tokens) => {\n      const tokenList = tokens.filterByChainId(101).getList(); // 101 = mainnet-beta\n      const map = new Map(tokenList.map((t) => [t.address, t]));\n      setTokenMap(map);\n    });\n  }, []);\n\n  const networkName = useMemo(() => {\n    if (!connection) return \"Unknown\";\n    const endpoint = connection.rpcEndpoint;\n    if (endpoint.includes(\"devnet\")) return \"Devnet\";\n    if (endpoint.includes(\"testnet\")) return \"Testnet\";\n    if (endpoint.includes(\"mainnet\")) return \"Mainnet\";\n    if (endpoint.includes(\"localhost\") || endpoint.includes(\"127.0.0.1\"))\n      return \"Localnet\";\n    const url = new URL(endpoint);\n    return url.hostname;\n  }, [connection]);\n\n  // Fetch token accounts\n  const fetchTokenAccounts = useCallback(\n    async (ownerPublicKey: PublicKey) => {\n      try {\n        setIsLoadingTokens(true);\n\n        let solBalance = 0;\n        try {\n          solBalance =\n            (await connection.getBalance(ownerPublicKey)) / LAMPORTS_PER_SOL;\n        } catch (error) {\n          console.error(\"Error fetching SOL balance:\", error);\n        }\n\n        const defaultTokens: TokenInfo[] = [\n          {\n            id: \"sol\",\n            symbol: \"SOL\",\n            name: \"Solana\",\n            balance: solBalance,\n            decimals: 9,\n            mintAddress: \"So11111111111111111111111111111111111111112\",\n            icon: \"/logo/solana-logo.svg\",\n          },\n        ];\n\n        const splTokens: TokenInfo[] = [];\n        try {\n          const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n            ownerPublicKey,\n            {\n              programId: new PublicKey(\n                \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n              ),\n            },\n          );\n\n          for (const account of tokenAccounts.value) {\n            const accountData = account.account.data.parsed.info;\n            const mintAddress = accountData.mint;\n            const tokenAmount = accountData.tokenAmount;\n\n            if (tokenAmount.uiAmount > 0) {\n              const registryInfo = tokenMap.get(mintAddress);\n\n              splTokens.push({\n                id: mintAddress,\n                symbol:\n                  registryInfo?.symbol || mintAddress.substring(0, 4) + \"...\",\n                name:\n                  registryInfo?.name || \"Token \" + mintAddress.substring(0, 6),\n                balance: tokenAmount.uiAmount,\n                decimals: tokenAmount.decimals,\n                mintAddress: mintAddress,\n                icon: registryInfo?.logoURI,\n              });\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching SPL token accounts:\", error);\n        }\n\n        return [...defaultTokens, ...splTokens];\n      } catch (error) {\n        console.error(\"Error fetching token accounts:\", error);\n        return [\n          {\n            id: \"sol\",\n            symbol: \"SOL\",\n            name: \"Solana\",\n            balance: 0,\n            decimals: 9,\n            icon: \"/crypto-logos/solana-logo.svg\",\n          },\n        ];\n      } finally {\n        setIsLoadingTokens(false);\n      }\n    },\n    [connection, tokenMap],\n  );\n\n  useEffect(() => {\n    if (tokens) {\n      setAvailableTokens(tokens);\n    } else if (connected && publicKey) {\n      fetchTokenAccounts(publicKey)\n        .then((fetchedTokens) => {\n          setAvailableTokens(fetchedTokens);\n        })\n        .catch((error) => {\n          console.error(\"Error setting tokens:\", error);\n          setAvailableTokens([\n            {\n              id: \"sol\",\n              symbol: \"SOL\",\n              name: \"Solana\",\n              balance: 0,\n              decimals: 9,\n              icon: \"/crypto-logos/solana-logo.svg\",\n            },\n          ]);\n        });\n    }\n  }, [tokens, connected, publicKey, tokenMap, fetchTokenAccounts]);\n\n  // ✅ Add back handleSubmit\n  async function handleSubmit(values: FormValues) {\n    if (!connected || !publicKey || !connection) {\n      toast.error(\"Wallet not connected\", {\n        description: \"Please connect your wallet to send tokens\",\n      });\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n\n      const destinationPubkey = new PublicKey(values.destination);\n      const selectedTokenInfo = availableTokens.find(\n        (t) => t.id === values.token,\n      );\n\n      if (!selectedTokenInfo || values.amount === undefined) {\n        throw new Error(\"Invalid token or amount\");\n      }\n\n      const transaction = new Transaction();\n\n      if (values.token === \"sol\") {\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: publicKey,\n            toPubkey: destinationPubkey,\n            lamports: Math.floor(values.amount * LAMPORTS_PER_SOL),\n          }),\n        );\n      } else if (selectedTokenInfo.mintAddress) {\n        const mintPubkey = new PublicKey(selectedTokenInfo.mintAddress);\n        const senderATA = await getAssociatedTokenAddress(\n          mintPubkey,\n          publicKey,\n        );\n        const receiverATA = await getAssociatedTokenAddress(\n          mintPubkey,\n          destinationPubkey,\n        );\n\n        transaction.add(\n          createTransferInstruction(\n            senderATA,\n            receiverATA,\n            publicKey,\n            Math.floor(\n              values.amount * Math.pow(10, selectedTokenInfo.decimals),\n            ),\n          ),\n        );\n      }\n\n      const { blockhash } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = publicKey;\n\n      const signature = await sendTransaction(transaction, connection);\n\n      toast.success(\"Transaction sent\", {\n        description: \`Signature: \${signature}\`,\n      });\n    } catch (error) {\n      console.error(\"Transaction error:\", error);\n      toast.error(\"Transaction failed\", {\n        description:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  const handleTokenChange = (value: string) => {\n    const token = availableTokens.find((t) => t.id === value);\n    if (token) {\n      setSelectedToken(token);\n      form.setValue(\"token\", value);\n    }\n  };\n\n  const renderTokenItem = (token: TokenInfo) => (\n    <SelectItem key={token.id} value={token.id}>\n      <div className=\"flex items-center justify-between w-full\">\n        <div className=\"flex items-center\">\n          {token.icon && (\n            <div className=\"w-5 h-5 mr-2 rounded-full overflow-hidden flex items-center justify-center\">\n              <OptimizedImage\n                src={token.icon || \"/placeholder.svg\"}\n                alt={token.symbol}\n                className=\"w-4 h-4 object-contain\"\n                fallbackSrc=\"/placeholder.svg\"\n                lazy={false}\n              />\n            </div>\n          )}\n          <span>{token.symbol}</span>\n        </div>\n        {showTokenBalance && (\n          <span className=\"text-muted-foreground ml-2 text-sm\">\n            {token.balance.toLocaleString(undefined, {\n              minimumFractionDigits: 0,\n              maximumFractionDigits: token.decimals > 6 ? 6 : token.decimals,\n            })}\n          </span>\n        )}\n      </div>\n    </SelectItem>\n  );\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Wallet className=\"h-5 w-5 mr-2\" />\n          Send Tokens\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={(e) => e.preventDefault()} className=\"space-y-6\">\n            {/* Destination */}\n            <FormField\n              control={form.control}\n              name=\"destination\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Destination Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter wallet address\"\n                      {...field}\n                      disabled={!connected}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Token + Amount */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"token\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Token</FormLabel>\n                    <Select\n                      onValueChange={handleTokenChange}\n                      defaultValue={field.value}\n                      disabled={!connected}\n                    >\n                      <FormControl>\n                        <SelectTrigger className=\"w-full min-w-[180px]\">\n                          <SelectValue\n                            placeholder={\n                              isLoadingTokens || isUpdatingBalance\n                                ? \"Loading tokens...\"\n                                : \"Select a token\"\n                            }\n                          />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {isLoadingTokens || isUpdatingBalance ? (\n                          <div className=\"flex items-center justify-center p-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                            <span>\n                              {isUpdatingBalance\n                                ? \"Updating balances...\"\n                                : \"Loading tokens...\"}\n                            </span>\n                          </div>\n                        ) : availableTokens.length > 0 ? (\n                          <SelectGroup>\n                            {availableTokens.map(renderTokenItem)}\n                          </SelectGroup>\n                        ) : (\n                          <div className=\"p-2 text-muted-foreground text-center\">\n                            No tokens found\n                          </div>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Amount</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0.0\"\n                        step=\"any\"\n                        value={amountValue}\n                        onChange={(e) => {\n                          setAmountValue(e.target.value);\n                          field.onChange(\n                            e.target.value === \"\"\n                              ? undefined\n                              : Number.parseFloat(e.target.value),\n                          );\n                        }}\n                        disabled={!connected}\n                      />\n                    </FormControl>\n                    {selectedToken && showTokenBalance && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Available:{\" \"}\n                        {selectedToken.balance.toLocaleString(undefined, {\n                          minimumFractionDigits: 0,\n                          maximumFractionDigits:\n                            selectedToken.decimals > 6\n                              ? 6\n                              : selectedToken.decimals,\n                        })}{\" \"}\n                        {selectedToken.symbol}\n                      </p>\n                    )}\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Submit */}\n            {connected ? (\n              <Button\n                type=\"button\"\n                onClick={() => form.handleSubmit(handleSubmit)()}\n                className=\"w-full\"\n                disabled={isSubmitting || isLoading || isLoadingTokens}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Processing Transaction...\n                  </>\n                ) : (\n                  <>\n                    Send Tokens\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            ) : (\n              <WalletConnectButton className=\"w-full\">\n                Connect Wallet\n              </WalletConnectButton>\n            )}\n\n            {/* Network */}\n            {connected && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span>Network</span>\n                  <span className=\"font-medium bg-muted px-2 py-1 rounded\">\n                    {networkName}\n                  </span>\n                </div>\n              </div>\n            )}\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/send-token.json",
  },
  "swap": {
    name: "swap",
    description: "A modern token swap interface with wallet integration, dark theme support, and real-time token data from Jupiter's verified token list.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/swap/swap.tsx",
      content: "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"motion/react\";\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { Repeat, ChevronDown } from \"lucide-react\";\nimport { WalletConnectButton } from \"@/components/soldevkit-ui/wallet/wallet-connect-button\";\nimport { cn, fetchJupiterTokens, type TokenInfo } from \"@/lib/utils\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nconst TokenDropdown: React.FC<{\n  selectedToken: TokenInfo | null;\n  onSelect: (token: TokenInfo) => void;\n  tokens: TokenInfo[];\n}> = ({ selectedToken, onSelect, tokens }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleSelect = (token: TokenInfo) => {\n    onSelect(token);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full p-2 bg-muted border border-border rounded-md shadow-sm flex items-center justify-between text-left focus:outline-none focus:ring-2 focus:ring-ring transition-colors duration-200\"\n      >\n        {selectedToken ? (\n          <div className=\"flex items-center w-28\">\n            <OptimizedImage\n              src={selectedToken.logoURI || \"/placeholder-token.png\"}\n              alt={\`\${selectedToken.name} logo\`}\n              className=\"w-6 h-6 mr-2 rounded-full\"\n              fallbackSrc=\"/placeholder-token.png\"\n              lazy={false}\n            />\n            <span className=\"font-medium text-foreground\">\n              {selectedToken.symbol}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground w-28\">Select a token</span>\n        )}\n        <ChevronDown\n          className={cn(\n            \"w-5 h-5 text-muted-foreground transition-transform duration-200\",\n            isOpen && \"transform rotate-180\",\n          )}\n        />\n      </button>\n\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -10 }}\n          transition={{ duration: 0.2 }}\n          className=\"absolute z-10 w-full mt-1 bg-card border border-border rounded-md shadow-lg max-h-[300px] overflow-y-auto\"\n        >\n          <ul className=\"max-h-60 overflow-y-auto\">\n            {tokens.map((token) => (\n              <li key={token.address}>\n                <button\n                  type=\"button\"\n                  onClick={() => handleSelect(token)}\n                  className=\"w-full p-2 text-left hover:bg-muted flex items-center transition-colors duration-200\"\n                >\n                  <OptimizedImage\n                    src={token.logoURI || \"/placeholder-token.png\"}\n                    alt={\`\${token.name} logo\`}\n                    className=\"w-6 h-6 mr-2 rounded-full\"\n                    fallbackSrc=\"/placeholder-token.png\"\n                    lazy={false}\n                  />\n                  <span className=\"font-medium text-foreground\">\n                    {token.symbol}\n                  </span>\n                </button>\n              </li>\n            ))}\n          </ul>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nconst SwapUIContent: React.FC = () => {\n  const { publicKey, connected } = useWallet();\n  const [fromToken, setFromToken] = useState<TokenInfo | null>(null);\n  const [toToken, setToToken] = useState<TokenInfo | null>(null);\n  const [fromAmount, setFromAmount] = useState<string>(\"\");\n  const [toAmount, setToAmount] = useState<string>(\"\");\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [solBalance, setSolBalance] = useState<number>(0);\n  const [conversionRate, setConversionRate] = useState<number>(2);\n  const [tokenError, setTokenError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadTokens = async () => {\n      try {\n        setTokenError(null);\n        const data = await fetchJupiterTokens();\n        setTokens(data);\n      } catch (error) {\n        console.error(\"Failed to fetch tokens\", error);\n        setTokenError(\n          error instanceof Error ? error.message : \"Failed to load tokens\",\n        );\n      }\n    };\n    loadTokens();\n  }, []);\n\n  useEffect(() => {\n    const fetchSolBalance = async () => {\n      if (!publicKey || !connected) {\n        setSolBalance(0);\n        return;\n      }\n      try {\n        const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n        const balance = await connection.getBalance(publicKey);\n        setSolBalance(balance / LAMPORTS_PER_SOL);\n      } catch (error) {\n        console.error(\"Failed to fetch SOL balance\", error);\n        setSolBalance(0);\n      }\n    };\n    fetchSolBalance();\n  }, [publicKey, connected]);\n\n  // Throw error if token loading fails\n  if (tokenError) {\n    throw new Error(tokenError);\n  }\n\n  const handleMaxClick = () => {\n    setFromAmount(solBalance.toString());\n    const toValue = (solBalance * conversionRate).toFixed(6);\n    setToAmount(toValue);\n  };\n\n  const handleHalfClick = () => {\n    const halfBalance = solBalance / 2;\n    setFromAmount(halfBalance.toString());\n    const toValue = (halfBalance * conversionRate).toFixed(6);\n    setToAmount(toValue);\n  };\n\n  const handleSwapTokens = () => {\n    const tempToken = fromToken;\n    setFromToken(toToken);\n    setToToken(tempToken);\n\n    const newFromAmount = toAmount;\n    const newToAmount =\n      newFromAmount && !isNaN(parseFloat(newFromAmount))\n        ? (parseFloat(newFromAmount) * conversionRate).toString()\n        : \"\";\n\n    setFromAmount(newFromAmount);\n    setToAmount(newToAmount);\n\n    setConversionRate((prevRate) => (prevRate !== 0 ? 1 / prevRate : prevRate));\n  };\n\n  const handleFromAmountChange = (value: string) => {\n    setFromAmount(value);\n    if (value && !isNaN(parseFloat(value))) {\n      const toValue = (parseFloat(value) * conversionRate).toFixed(6);\n      setToAmount(toValue);\n    } else {\n      setToAmount(\"\");\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"p-4 rounded-lg max-w-[600px] mx-auto bg-card shadow-md border border-border\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Wallet Connection Section */}\n      {!connected && (\n        <div className=\"mb-4 p-4 bg-muted/50 border border-border rounded-lg\">\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            Connect your wallet to start swapping tokens\n          </p>\n          <div className=\"flex justify-center\">\n            <WalletConnectButton variant=\"default\" size=\"sm\" />\n          </div>\n        </div>\n      )}\n\n      <div className=\"-space-y-3\">\n        {/* From Section */}\n        <motion.div\n          className=\"p-4 rounded-lg bg-muted border border-border\"\n          initial={{ scale: 0.95 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-sm text-muted-foreground\">\n              You&apos;re selling\n            </span>\n            <div className=\"flex space-x-2\">\n              <div className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                {parseFloat(fromAmount || \"0\").toFixed(2)}\n              </div>\n              <button\n                onClick={handleHalfClick}\n                className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md hover:bg-accent transition-colors\"\n              >\n                HALF\n              </button>\n              <button\n                onClick={handleMaxClick}\n                className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md hover:bg-accent transition-colors\"\n              >\n                MAX\n              </button>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <TokenDropdown\n              selectedToken={fromToken}\n              onSelect={setFromToken}\n              tokens={tokens}\n            />\n            <input\n              type=\"number\"\n              value={fromAmount}\n              onChange={(e) => handleFromAmountChange(e.target.value)}\n              className=\"bg-transparent text-right outline-none text-foreground w-1/2\"\n              placeholder=\"0.00\"\n              min=\"0\"\n            />\n          </div>\n        </motion.div>\n\n        {/* Swap Button */}\n        <div className=\"flex justify-center\">\n          <motion.button\n            onClick={handleSwapTokens}\n            className=\"bg-background cursor-pointer p-2 rounded-md transition-colors border border-border\"\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            disabled={!fromToken || !toToken}\n            title=\"Swap Tokens\"\n          >\n            <Repeat className=\"rotate-90 text-muted-foreground\" />\n          </motion.button>\n        </div>\n\n        {/* To Section */}\n        <motion.div\n          className=\"p-4 rounded-lg bg-muted border border-border\"\n          initial={{ scale: 0.95 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-sm text-muted-foreground\">\n              You&apos;re buying\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <TokenDropdown\n              selectedToken={toToken}\n              onSelect={setToToken}\n              tokens={tokens}\n            />\n            <div className=\"flex flex-col justify-end items-end\">\n              <div className=\"pr-3\">\n                <div className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                  {parseFloat(fromAmount || \"0\").toFixed(2)}\n                </div>\n              </div>\n              <input\n                type=\"number\"\n                value={toAmount}\n                readOnly\n                className=\"bg-transparent outline-none text-right text-foreground w-full mt-1\"\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Submit Button */}\n      <motion.div\n        className={\`mt-4 \${\n          fromAmount && fromToken && toToken\n            ? \"cursor-pointer\"\n            : \"cursor-not-allowed\"\n        }\`}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: fromAmount && fromToken && toToken ? 1 : 0.5 }}\n        transition={{ duration: 0.5 }}\n      >\n        <button\n          className={cn(\n            \"w-full py-3 rounded-lg transition-all\",\n            fromAmount && fromToken && toToken\n              ? \"bg-primary text-primary-foreground hover:scale-95\"\n              : \"bg-muted text-muted-foreground cursor-not-allowed\",\n          )}\n          disabled={!fromAmount || !fromToken || !toToken}\n        >\n          {fromAmount ? \"Swap\" : \"Enter an amount\"}\n        </button>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nconst SwapUI: React.FC = () => {\n  return (\n    <APIErrorBoundary onRetry={() => window.location.reload()}>\n      <SwapUIContent />\n    </APIErrorBoundary>\n  );\n};\n\nexport default SwapUI;\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/swap.json",
  },
  "nft-card": {
    name: "nft-card",
    description: "A component for displaying NFT metadata with image, attributes, and collection information using Alchemy API.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/nft/nft-card.tsx",
      content: "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  cn,\n  shortAddress,\n  fetchNFTMetadata,\n  fetchNFTPrice,\n  type NFTMetadata,\n  type NFTPrice,\n} from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport { ExternalLink, Image as ImageIcon, Loader2, Copy, Check } from \"lucide-react\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nexport interface NFTCardProps {\n  /** The mint address of the NFT */\n  mintAddress: string | PublicKey;\n  /** Custom CSS classes */\n  className?: string;\n  /** Show NFT attributes */\n  showAttributes?: boolean;\n  /** Show collection info */\n  showCollection?: boolean;\n  /** Show price information */\n  showPrice?: boolean;\n  /** Card variant */\n  variant?: \"default\" | \"compact\" | \"detailed\";\n  /** Loading state */\n  isLoading?: boolean;\n  /** Click handler */\n  onClick?: () => void;\n  /** Custom metadata (bypasses fetching) */\n  metadata?: NFTMetadata;\n}\n\nconst NFTCardContent = React.forwardRef<HTMLDivElement, NFTCardProps>(\n  (\n    {\n      mintAddress,\n      className,\n      showAttributes = false,\n      showCollection = true,\n      showPrice = false,\n      variant = \"default\",\n      isLoading: externalLoading = false,\n      onClick,\n      metadata: customMetadata,\n      ...props\n    },\n    ref,\n  ) => {\n    const mintStr = React.useMemo(() => {\n      return typeof mintAddress === \"string\"\n        ? mintAddress\n        : mintAddress.toBase58();\n    }, [mintAddress]);\n\n    const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n    const [price, setPrice] = useState<NFTPrice | null>(null);\n    const [queryLoading, setQueryLoading] = useState(false);\n    const [priceLoading, setPriceLoading] = useState(false);\n    const [error, setError] = useState<Error | null>(null);\n    const [copied, setCopied] = useState(false);\n\n    useEffect(() => {\n      if (!customMetadata && mintStr) {\n        setQueryLoading(true);\n        setError(null);\n\n        fetchNFTMetadata(mintStr)\n          .then((data) => {\n            setMetadata(data);\n            setQueryLoading(false);\n          })\n          .catch((err) => {\n            setError(err);\n            setQueryLoading(false);\n            throw err;\n          });\n      }\n    }, [mintStr, customMetadata]);\n\n    useEffect(() => {\n      if (showPrice && mintStr) {\n        setPriceLoading(true);\n        setError(null);\n\n        fetchNFTPrice(mintStr)\n          .then((data) => {\n            setPrice(data);\n            setPriceLoading(false);\n          })\n          .catch((err) => {\n            setError(err);\n            setPriceLoading(false);\n            throw err;\n          });\n      }\n    }, [mintStr, showPrice]);\n\n    const finalMetadata = customMetadata || metadata;\n    const isLoading = externalLoading || queryLoading || priceLoading;\n\n    const handleCopyAddress = async () => {\n      try {\n        await navigator.clipboard.writeText(mintStr);\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n      } catch (err) {\n        console.error('Failed to copy address:', err);\n      }\n    };\n\n    const cardVariants = {\n      default: \"p-4 space-y-3\",\n      compact: \"p-3 space-y-2\",\n      detailed: \"p-6 space-y-4\",\n    };\n\n    const imageVariants = {\n      default: \"h-48\",\n      compact: \"h-32\",\n      detailed: \"h-64\",\n    };\n\n    if (isLoading) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"relative overflow-hidden rounded-xl border border-border/50 bg-gradient-to-br from-card to-card/80 backdrop-blur-sm text-card-foreground shadow-lg\",\n            cardVariants[variant],\n            className,\n          )}\n          {...props}\n        >\n          <div\n            className={cn(\n              \"flex items-center justify-center bg-gradient-to-br from-muted/50 to-muted rounded-lg shadow-inner\",\n              imageVariants[variant],\n            )}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary/60\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gradient-to-r from-muted to-muted/50 rounded-lg animate-pulse\" />\n            <div className=\"h-3 bg-gradient-to-r from-muted/80 to-muted/30 rounded-lg w-2/3 animate-pulse\" />\n          </div>\n        </div>\n      );\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    if (!finalMetadata) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"relative overflow-hidden rounded-xl border border-border/50 bg-gradient-to-br from-card to-card/80 backdrop-blur-sm text-card-foreground shadow-lg\",\n            cardVariants[variant],\n            className,\n          )}\n          {...props}\n        >\n          <div\n            className={cn(\n              \"flex items-center justify-center bg-gradient-to-br from-muted/50 to-muted rounded-lg shadow-inner\",\n              imageVariants[variant],\n            )}\n          >\n            <ImageIcon className=\"h-8 w-8 text-muted-foreground/60\" />\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold text-sm text-muted-foreground\">No NFT data</h3>\n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-xs text-muted-foreground/80 font-mono\">\n                {shortAddress(mintStr)}\n              </p>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleCopyAddress();\n                }}\n                className=\"flex h-6 w-6 items-center justify-center rounded-md bg-muted/50 hover:bg-muted transition-colors duration-200\"\n                title={copied ? \"Copied!\" : \"Copy NFT Address\"}\n              >\n                {copied ? (\n                  <Check className=\"h-3 w-3 text-green-400\" />\n                ) : (\n                  <Copy className=\"h-3 w-3\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"group relative overflow-hidden rounded-xl border border-border/50 bg-gradient-to-br from-card to-card/80 backdrop-blur-sm text-card-foreground shadow-lg transition-all duration-300\",\n          onClick && \"cursor-pointer hover:shadow-2xl hover:shadow-primary/10 hover:scale-[1.03] hover:border-primary/30\",\n          cardVariants[variant],\n          className,\n        )}\n        onClick={onClick}\n        whileHover={onClick ? { y: -4, rotateY: 2 } : undefined}\n        whileTap={onClick ? { scale: 0.97 } : undefined}\n        {...props}\n      >\n        {/* NFT Image */}\n        <div\n          className={cn(\n            \"relative overflow-hidden rounded-lg bg-gradient-to-br from-muted/50 to-muted shadow-inner\",\n            imageVariants[variant],\n          )}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10\" />\n          {finalMetadata.image ? (\n            <OptimizedImage\n              src={finalMetadata.image}\n              alt={finalMetadata.name || shortAddress(mintStr)} // ✅ fallback to short address\n              className=\"h-full w-full object-cover transition-all duration-500 group-hover:scale-110 group-hover:brightness-110\"\n              fallbackSrc=\"/placeholder-nft.png\"\n              lazy={true}\n            />\n          ) : (\n            <div className=\"flex h-full items-center justify-center bg-gradient-to-br from-muted to-muted/80\">\n              <ImageIcon className=\"h-8 w-8 text-muted-foreground/60\" />\n            </div>\n          )}\n\n          <div className=\"absolute top-3 right-3 z-20 flex gap-2\">\n            {/* Copy Address Button */}\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                handleCopyAddress();\n              }}\n              className=\"flex h-8 w-8 items-center justify-center rounded-full bg-black/60 backdrop-blur-sm text-white hover:bg-black/80 hover:scale-110 transition-all duration-200 shadow-lg border border-white/20\"\n              title={copied ? \"Copied!\" : \"Copy NFT Address\"}\n            >\n              {copied ? (\n                <Check className=\"h-3.5 w-3.5 text-green-400\" />\n              ) : (\n                <Copy className=\"h-3.5 w-3.5\" />\n              )}\n            </button>\n            \n            {/* External Link Button */}\n            {finalMetadata.external_url && (\n              <a\n                href={finalMetadata.external_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex h-8 w-8 items-center justify-center rounded-full bg-black/60 backdrop-blur-sm text-white hover:bg-black/80 hover:scale-110 transition-all duration-200 shadow-lg border border-white/20\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <ExternalLink className=\"h-3.5 w-3.5\" />\n              </a>\n            )}\n          </div>\n        </div>\n\n        {/* NFT Info */}\n        <div className=\"space-y-2\">\n          <div>\n            <div className=\"flex items-center justify-between\">\n              <h3\n                className={cn(\n                  \"font-semibold leading-tight\",\n                  variant === \"compact\" ? \"text-sm\" : \"text-base\",\n                )}\n              >\n                {finalMetadata.name || shortAddress(mintStr)} {/* ✅ fallback */}\n              </h3>\n\n              {showPrice && price && (\n                <div className=\"px-3 py-1.5 bg-gradient-to-r from-primary/10 to-primary/5 rounded-full border border-primary/20\">\n                  <p className=\"text-sm font-bold text-primary\">\n                    {Number(price.price).toFixed(2)} {price.currency || \"SOL\"}\n                  </p>\n                </div>\n               )}\n            </div>\n\n            {showCollection && finalMetadata.collection?.name && (\n              <p className=\"text-xs text-muted-foreground\">\n                {shortAddress(finalMetadata.collection.name)}\n              </p>\n            )}\n          </div>\n\n\n\n          {showAttributes &&\n            finalMetadata.attributes &&\n            finalMetadata.attributes.length > 0 && (\n              <div className=\"space-y-2\">\n                <p className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wide\">\n                  Attributes\n                </p>\n                <div className=\"flex flex-wrap gap-1.5\">\n                  {finalMetadata.attributes\n                    .slice(0, variant === \"detailed\" ? 6 : 3)\n                    .map((attr, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center rounded-lg bg-gradient-to-r from-secondary to-secondary/80 px-2.5 py-1.5 text-xs font-semibold shadow-sm border border-secondary/50 hover:shadow-md transition-shadow duration-200\"\n                      >\n                        {attr.trait_type}: {attr.value}\n                      </span>\n                    ))}\n                  {finalMetadata.attributes.length >\n                    (variant === \"detailed\" ? 6 : 3) && (\n                    <span className=\"inline-flex items-center rounded-lg bg-gradient-to-r from-muted to-muted/80 px-2.5 py-1.5 text-xs font-medium text-muted-foreground border border-muted/50\">\n                      +\n                      {finalMetadata.attributes.length -\n                        (variant === \"detailed\" ? 6 : 3)}{\" \"}\n                      more\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n        </div>\n      </motion.div>\n    );\n  },\n);\n\nNFTCardContent.displayName = \"NFTCardContent\";\n\nconst NFTCard = React.forwardRef<HTMLDivElement, NFTCardProps>((props, ref) => {\n  return (\n    <APIErrorBoundary onRetry={() => window.location.reload()}>\n      <NFTCardContent {...props} ref={ref} />\n    </APIErrorBoundary>\n  );\n});\n\nNFTCard.displayName = \"NFTCard\";\n\nexport { NFTCard };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/nft-card.json",
  },
  "optimized-image": {
    name: "optimized-image",
    description: "A framework-agnostic image component with Next.js optimization detection, lazy loading, error handling, and accessibility features.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/optimized-image/optimized-image.tsx",
      content: "// UniversalImage.tsx\nimport React from \"react\";\n\n// Define props that work for both <img> and next/image\nexport interface UniversalImageProps {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  priority?: boolean; // only used in Next.js\n  style?: React.CSSProperties;\n  fallbackSrc?: string; // fallback image source\n  lazy?: boolean; // lazy loading (ignored in this simple implementation)\n}\n\n// Try to dynamically import next/image if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet NextImage: any;\ntry {\n  // This will only work in Next.js\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  NextImage = require(\"next/image\").default;\n} catch {\n  NextImage = null;\n}\n\nexport const UniversalImage: React.FC<UniversalImageProps> = (props) => {\n  const { src, alt, width, height, priority, className, style, fallbackSrc, lazy, ...rest } = props;\n  \n  if (NextImage) {\n    // Running in Next.js → use next/image\n    // If width/height not provided, use fill mode or provide defaults\n    if (!width || !height) {\n      return (\n        <div className={className} style={{ position: 'relative', ...style }}>\n          <NextImage\n            src={src}\n            alt={alt}\n            fill\n            priority={priority}\n            onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n               if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n                 e.currentTarget.src = fallbackSrc;\n               }\n             }}\n            {...rest}\n          />\n        </div>\n      );\n    }\n    \n    return (\n      <NextImage\n        src={src}\n        alt={alt}\n        width={width}\n        height={height}\n        priority={priority}\n        className={className}\n        style={style}\n        onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n           if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n             e.currentTarget.src = fallbackSrc;\n           }\n         }}\n        {...rest}\n      />\n    );\n  }\n\n  // Running in plain React → fallback to <img>\n  return (\n    // eslint-disable-next-line @next/next/no-img-element\n    <img\n      src={src}\n      alt={alt}\n      width={width}\n      height={height}\n      className={className}\n      style={style}\n      loading={lazy ? \"lazy\" : \"eager\"}\n      onError={(e) => {\n        if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n          e.currentTarget.src = fallbackSrc;\n        }\n      }}\n      {...rest}\n    />\n  );\n};\n\n// Export as OptimizedImage for backward compatibility\nexport const OptimizedImage = UniversalImage;\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/optimized-image.json",
  },
  "nft-img": {
    name: "nft-img",
    description: "A component for displaying NFT images with loading states and fallback handling.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/nft/nft-img.tsx",
      content: "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Loader2, Image as ImageIcon } from \"lucide-react\";\nimport { fetchNFTMetadata, type NFTMetadata, cn } from \"@/lib/utils\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nexport interface NFTImageProps {\n  /** The mint address of the NFT */\n  mintAddress: string | PublicKey;\n  /** Custom CSS classes */\n  className?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Loading state */\n  isLoading?: boolean;\n}\n\nconst NFTImageContent: React.FC<NFTImageProps> = ({\n  mintAddress,\n  className,\n  alt,\n  isLoading: externalLoading = false,\n}) => {\n  const mintStr =\n    typeof mintAddress === \"string\" ? mintAddress : mintAddress.toBase58();\n\n  const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (mintStr) {\n      setLoading(true);\n      setError(null);\n      fetchNFTMetadata(mintStr)\n        .then((data) => setMetadata(data))\n        .catch((error) => {\n          console.error(\"Error fetching NFT metadata:\", error);\n          setError(\n            error instanceof Error ? error.message : \"Failed to load NFT\",\n          );\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [mintStr]);\n\n  const isLoading = externalLoading || loading;\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-md\",\n          className,\n        )}\n      >\n        <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  if (!metadata?.image) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-md\",\n          className,\n        )}\n      >\n        <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <OptimizedImage\n      src={metadata.image}\n      alt={alt || metadata.name || \"NFT\"}\n      className={cn(\"object-cover rounded-md\", className)}\n      lazy={true}\n      fallbackSrc=\"/placeholder-nft.png\"\n    />\n  );\n};\n\nexport const NFTImage: React.FC<NFTImageProps> = (props) => {\n  return (\n    <APIErrorBoundary\n      onRetry={() => window.location.reload()}\n      className=\"inline-block\"\n    >\n      <NFTImageContent {...props} />\n    </APIErrorBoundary>\n  );\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/nft-img.json",
  },
  "token-img": {
    name: "token-img",
    description: "A component for displaying token images with loading states and fallback handling using Jupiter's token list.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/token/token-img.tsx",
      content: "\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { cn, findToken, type TokenInfo } from \"@/lib/utils\";\nimport { Loader2, Image as ImageIcon } from \"lucide-react\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\ninterface TokenImageProps {\n  /** Token address or symbol */\n  tokenAddressOrSymbol: string;\n  /** Custom CSS classes */\n  className?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Loading state */\n  isLoading?: boolean;\n  /** Size of the image (default: 32px) */\n  size?: number;\n}\n\nconst TokenImageContent: React.FC<TokenImageProps> = ({\n  tokenAddressOrSymbol,\n  className,\n  alt,\n  isLoading: externalLoading = false,\n  size = 32,\n}) => {\n  const [token, setToken] = useState<TokenInfo | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchTokenData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const found = await findToken(tokenAddressOrSymbol);\n      setToken(found);\n    } catch (error) {\n      console.error(\"Error fetching token metadata:\", error);\n      setError(error instanceof Error ? error.message : \"Failed to load token\");\n      setToken(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenAddressOrSymbol]);\n\n  useEffect(() => {\n    if (tokenAddressOrSymbol) {\n      fetchTokenData();\n    }\n  }, [tokenAddressOrSymbol, fetchTokenData]);\n\n  const isLoading = externalLoading || loading;\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-full\",\n          className,\n        )}\n        style={{ width: size, height: size }}\n      >\n        <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  if (!token?.logoURI) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-full\",\n          className,\n        )}\n        style={{ width: size, height: size }}\n      >\n        <ImageIcon className=\"h-4 w-4 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <OptimizedImage\n      src={token.logoURI}\n      alt={alt || token.symbol}\n      className={cn(\"rounded-full object-contain\", className)}\n      width={size}\n      height={size}\n      lazy={true}\n      fallbackSrc=\"/placeholder-token.png\"\n    />\n  );\n};\n\nexport const TokenImage: React.FC<TokenImageProps> = (props) => {\n  return (\n    <APIErrorBoundary\n      onRetry={() => window.location.reload()}\n      className=\"inline-block\"\n    >\n      <TokenImageContent {...props} />\n    </APIErrorBoundary>\n  );\n};\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/token-img.json",
  },
  "wallet-connect-button-demo": {
    name: "wallet-connect-button-demo",
    description: "Demo showcasing Solana wallet connection with different variants.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/wallet-connect-button-demo.tsx",
      content: "import React from \"react\";\nimport { WalletConnectButton } from \"@/registry/default/ui/wallet/wallet-connect-button\";\nimport { Wallet, } from \"lucide-react\";\n\nfunction walletConnectButtonDemo() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-6 p-8\">\n\n          <WalletConnectButton\n            variant=\"default\"\n            size=\"default\"\n            className=\"w-full\"\n            icon={<Wallet className=\"h-4 w-4\" />}\n          />\n        </div>\n  );\n}\n\nexport default walletConnectButtonDemo;\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/wallet-connect-button-demo.tsx")),
    source: "import React from \"react\";\nimport { WalletConnectButton } from \"@/registry/default/ui/wallet/wallet-connect-button\";\nimport { Wallet, } from \"lucide-react\";\n\nfunction walletConnectButtonDemo() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-6 p-8\">\n\n          <WalletConnectButton\n            variant=\"default\"\n            size=\"default\"\n            className=\"w-full\"\n            icon={<Wallet className=\"h-4 w-4\" />}\n          />\n        </div>\n  );\n}\n\nexport default walletConnectButtonDemo;\n",
    command: "https://soldevkit.com/r/wallet-connect-button-demo.json",
  },
  "pk-input-demo": {
    name: "pk-input-demo",
    description: "Demo showcasing Solana public key input with validation.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/pk-input-demo.tsx",
      content: "\"use client\";\n\nimport { PKInput } from \"@/registry/default/ui/pk/pk-input\";\n\nexport default function PKInputDemo() {\n  return (\n    <div className=\"space-y-6\">\n        <PKInput placeholder=\"Enter your public key\" />\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/pk-input-demo.tsx")),
    source: "\"use client\";\n\nimport { PKInput } from \"@/registry/default/ui/pk/pk-input\";\n\nexport default function PKInputDemo() {\n  return (\n    <div className=\"space-y-6\">\n        <PKInput placeholder=\"Enter your public key\" />\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/pk-input-demo.json",
  },
  "txn-settings-demo": {
    name: "txn-settings-demo",
    description: "Demo showcasing transaction settings with priority fees, slippage, and configuration options.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/txn-settings-demo.tsx",
      content: "\"use client\";\n\nimport {\n  TxnSettings,\n  TxnSettingsProvider,\n} from \"@/registry/default/ui/transaction/txn-settings\";\n\nexport default function TxnSettingsDemo() {\n  return (\n  \n        <div className=\"flex flex-col items-center space-y-2\">\n          <TxnSettingsProvider>\n            <TxnSettings />\n          </TxnSettingsProvider>\n        </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/txn-settings-demo.tsx")),
    source: "\"use client\";\n\nimport {\n  TxnSettings,\n  TxnSettingsProvider,\n} from \"@/registry/default/ui/transaction/txn-settings\";\n\nexport default function TxnSettingsDemo() {\n  return (\n  \n        <div className=\"flex flex-col items-center space-y-2\">\n          <TxnSettingsProvider>\n            <TxnSettings />\n          </TxnSettingsProvider>\n        </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/txn-settings-demo.json",
  },
  "txn-list-demo": {
    name: "txn-list-demo",
    description: "Demo showcasing transaction list with loading states, empty states, and Solscan integration.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/txn-list-demo.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport { VersionedTransactionResponse } from \"@solana/web3.js\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\n\n// ✅ Use React.lazy with default export from txn-list.tsx\nconst TxnList = React.lazy(\n  () => import(\"@/registry/default/ui/transaction/txn-list\"),\n);\n\nexport default function TxnListDemo() {\n  const { connection } = useConnection();\n  const [transactions, setTransactions] = React.useState<\n    VersionedTransactionResponse[]\n  >([]);\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const fetchTransactions = React.useCallback(async () => {\n    if (isFetching) return;\n\n    try {\n      setIsFetching(true);\n      const signatures = [\n        \"3EgXo2ExYe76GqkjbCbwPMW7reoptpGjnvCUwsKsAPHtKdH3jj9y9ivKaeZyh4bz1tAvZrq6Q6spG6cm6q6MwYwa\",\n        \"kiJMZhehtKezX6Hg5kenUQSbLaTpe9dbqZyvqW4FNXaD6UVuLiGW1yPLENdSjyXWR1MSh8jSWDovZw5RW3bkFSE\",\n      ];\n\n      const fetchedTxns = await connection.getTransactions(signatures, {\n        maxSupportedTransactionVersion: 0,\n      });\n\n      // filter out nulls\n      setTransactions(\n        fetchedTxns.filter(\n          (txn): txn is VersionedTransactionResponse => txn !== null,\n        ),\n      );\n    } finally {\n      setIsFetching(false);\n    }\n  }, [isFetching, connection]);\n\n  React.useEffect(() => {\n    if (transactions.length === 0 && !isFetching) {\n      fetchTransactions();\n    }\n  }, [fetchTransactions, transactions.length, isFetching]);\n\n  return (\n    // ✅ Wrap lazy-loaded component in Suspense\n    <React.Suspense fallback={<div>Loading transactions...</div>}>\n      <TxnList\n        transactions={transactions}\n        onClick={(txn) => {\n          console.log(\"Clicked:\", txn.transaction.signatures[0]);\n        }}\n      />\n    </React.Suspense>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/txn-list-demo.tsx")),
    source: "\"use client\";\n\nimport React from \"react\";\nimport { VersionedTransactionResponse } from \"@solana/web3.js\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\n\n// ✅ Use React.lazy with default export from txn-list.tsx\nconst TxnList = React.lazy(\n  () => import(\"@/registry/default/ui/transaction/txn-list\"),\n);\n\nexport default function TxnListDemo() {\n  const { connection } = useConnection();\n  const [transactions, setTransactions] = React.useState<\n    VersionedTransactionResponse[]\n  >([]);\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const fetchTransactions = React.useCallback(async () => {\n    if (isFetching) return;\n\n    try {\n      setIsFetching(true);\n      const signatures = [\n        \"3EgXo2ExYe76GqkjbCbwPMW7reoptpGjnvCUwsKsAPHtKdH3jj9y9ivKaeZyh4bz1tAvZrq6Q6spG6cm6q6MwYwa\",\n        \"kiJMZhehtKezX6Hg5kenUQSbLaTpe9dbqZyvqW4FNXaD6UVuLiGW1yPLENdSjyXWR1MSh8jSWDovZw5RW3bkFSE\",\n      ];\n\n      const fetchedTxns = await connection.getTransactions(signatures, {\n        maxSupportedTransactionVersion: 0,\n      });\n\n      // filter out nulls\n      setTransactions(\n        fetchedTxns.filter(\n          (txn): txn is VersionedTransactionResponse => txn !== null,\n        ),\n      );\n    } finally {\n      setIsFetching(false);\n    }\n  }, [isFetching, connection]);\n\n  React.useEffect(() => {\n    if (transactions.length === 0 && !isFetching) {\n      fetchTransactions();\n    }\n  }, [fetchTransactions, transactions.length, isFetching]);\n\n  return (\n    // ✅ Wrap lazy-loaded component in Suspense\n    <React.Suspense fallback={<div>Loading transactions...</div>}>\n      <TxnList\n        transactions={transactions}\n        onClick={(txn) => {\n          console.log(\"Clicked:\", txn.transaction.signatures[0]);\n        }}\n      />\n    </React.Suspense>\n  );\n}\n",
    command: "https://soldevkit.com/r/txn-list-demo.json",
  },
  "avatar-demo": {
    name: "avatar-demo",
    description: "Demo showcasing Solana address avatars with different sizes, styles, and interactive examples.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/avatar-demo.tsx",
      content: "\"use client\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { Avatar } from \"@/registry/default/ui/avatar/avatar\";\n\nexport default function AvatarDemo() {\n  // Sample public keys for demonstration\n  const sampleAddress = new PublicKey(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Default Size */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Avatar address={sampleAddress} />\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/avatar-demo.tsx")),
    source: "\"use client\";\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { Avatar } from \"@/registry/default/ui/avatar/avatar\";\n\nexport default function AvatarDemo() {\n  // Sample public keys for demonstration\n  const sampleAddress = new PublicKey(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Default Size */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Avatar address={sampleAddress} />\n        </div>\n      </div>\n\n\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/avatar-demo.json",
  },
  "send-token-demo": {
    name: "send-token-demo",
    description: "Demo showcasing token sending functionality with form validation, token selection, and transaction handling.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/send-token-demo.tsx",
      content: "\"use client\";\n\nimport { SendTokenForm } from \"../ui/token/send-token\";\n\nexport default function SendTokenDemo() {\n  return (\n    <div>\n      <h1 className=\"text-xl font-bold mb-2\">Transfer Solana Tokens</h1>\n      <SendTokenForm className=\"max-w-md\" />\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/send-token-demo.tsx")),
    source: "\"use client\";\n\nimport { SendTokenForm } from \"../ui/token/send-token\";\n\nexport default function SendTokenDemo() {\n  return (\n    <div>\n      <h1 className=\"text-xl font-bold mb-2\">Transfer Solana Tokens</h1>\n      <SendTokenForm className=\"max-w-md\" />\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/send-token-demo.json",
  },
  "swap-demo": {
    name: "swap-demo",
    description: "Demo showcasing token swap interface with wallet integration, dark theme support, and real-time token data.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/swap-demo.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport SwapUI from \"@/registry/default/ui/swap/swap\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  TorusWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\n// Import wallet adapter CSS\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\nexport default function SwapDemo() {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new TorusWalletAdapter(),\n    ],\n    [network],\n  );\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[600px] w-full space-y-8 p-4\">\n      <div className=\"space-y-4 text-center\">\n        <h3 className=\"text-2xl font-bold\">Token Swap Interface</h3>\n        <p className=\"text-sm text-muted-foreground max-w-md\">\n          A modern token swap interface with wallet integration and dark theme\n          support. Connect your wallet to start swapping tokens on Solana.\n        </p>\n      </div>\n\n      <div className=\"w-full max-w-2xl\">\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletModalProvider>\n              <div className=\"space-y-6\">\n                {/* Main Swap Component */}\n                <div className=\"flex justify-center\">\n                  <SwapUI />\n                </div>\n              </div>\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/swap-demo.tsx")),
    source: "\"use client\";\n\nimport React from \"react\";\nimport SwapUI from \"@/registry/default/ui/swap/swap\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  TorusWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\n// Import wallet adapter CSS\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\nexport default function SwapDemo() {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new TorusWalletAdapter(),\n    ],\n    [network],\n  );\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[600px] w-full space-y-8 p-4\">\n      <div className=\"space-y-4 text-center\">\n        <h3 className=\"text-2xl font-bold\">Token Swap Interface</h3>\n        <p className=\"text-sm text-muted-foreground max-w-md\">\n          A modern token swap interface with wallet integration and dark theme\n          support. Connect your wallet to start swapping tokens on Solana.\n        </p>\n      </div>\n\n      <div className=\"w-full max-w-2xl\">\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletModalProvider>\n              <div className=\"space-y-6\">\n                {/* Main Swap Component */}\n                <div className=\"flex justify-center\">\n                  <SwapUI />\n                </div>\n              </div>\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </div>\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/swap-demo.json",
  },
  "nft-card-demo": {
    name: "nft-card-demo",
    description: "Demo showcasing NFT card component with different variants and configurations.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/nft-card-demo.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport { NFTCard } from \"@/registry/default/ui/nft/nft-card\";\n\nexport default function NFTCardDemo() {\n  const mintAddress = \"97jqKJUM87qKmSu5qgengChf2yMSjbDSh8ykyju2W6zh\";\n\n  return (\n    <div className=\"flex flex-col gap-8\">\n      {/* Default Variant with Price */}\n      <div>\n        <div className=\"w-64\">\n          <NFTCard\n            mintAddress={mintAddress}\n            variant=\"default\"\n            showCollection\n            showPrice\n            // showAttributes\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/nft-card-demo.tsx")),
    source: "\"use client\";\n\nimport React from \"react\";\nimport { NFTCard } from \"@/registry/default/ui/nft/nft-card\";\n\nexport default function NFTCardDemo() {\n  const mintAddress = \"97jqKJUM87qKmSu5qgengChf2yMSjbDSh8ykyju2W6zh\";\n\n  return (\n    <div className=\"flex flex-col gap-8\">\n      {/* Default Variant with Price */}\n      <div>\n        <div className=\"w-64\">\n          <NFTCard\n            mintAddress={mintAddress}\n            variant=\"default\"\n            showCollection\n            showPrice\n            // showAttributes\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/nft-card-demo.json",
  },
  "nft-img-demo": {
    name: "nft-img-demo",
    description: "Demo showcasing NFT image component with different sizes and loading states.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/nft-img-demo.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport { NFTImage } from \"@/registry/default/ui/nft/nft-img\";\n\nexport default function NFTImageDemo() {\n  const mintAddress = \"97jqKJUM87qKmSu5qgengChf2yMSjbDSh8ykyju2W6zh\";\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <h2 className=\"text-lg font-semibold\">NFT Image Demo</h2>\n\n      <div className=\"w-64 h-64\">\n        <NFTImage mintAddress={mintAddress} className=\"w-full h-full\" />\n      </div>\n      <div className=\"w-48 h-48\">\n        <NFTImage mintAddress={mintAddress} className=\"w-full h-full\" />\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/nft-img-demo.tsx")),
    source: "\"use client\";\n\nimport React from \"react\";\nimport { NFTImage } from \"@/registry/default/ui/nft/nft-img\";\n\nexport default function NFTImageDemo() {\n  const mintAddress = \"97jqKJUM87qKmSu5qgengChf2yMSjbDSh8ykyju2W6zh\";\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <h2 className=\"text-lg font-semibold\">NFT Image Demo</h2>\n\n      <div className=\"w-64 h-64\">\n        <NFTImage mintAddress={mintAddress} className=\"w-full h-full\" />\n      </div>\n      <div className=\"w-48 h-48\">\n        <NFTImage mintAddress={mintAddress} className=\"w-full h-full\" />\n      </div>\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/nft-img-demo.json",
  },
  "token-img-demo": {
    name: "token-img-demo",
    description: "Demo showcasing token image component with different tokens and sizes.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/token-img-demo.tsx",
      content: "\"use client\";\n\nimport React from \"react\";\nimport { TokenImage } from \"@/registry/default/ui/token/token-img\";\n\nexport default function TokenImageDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <h2 className=\"text-lg font-semibold\">Token Image Demo</h2>\n\n      <div className=\"flex items-center gap-4\">\n        {/* By symbol */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage tokenAddressOrSymbol=\"SOL\" size={48} />\n          <span className=\"text-sm mt-2\">SOL</span>\n        </div>\n\n        {/* By address (USDC mainnet) */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage\n            tokenAddressOrSymbol=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n            size={48}\n          />\n          <span className=\"text-sm mt-2\">USDC</span>\n        </div>\n\n        {/* By address (USDT mainnet) */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage\n            tokenAddressOrSymbol=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n            size={48}\n          />\n          <span className=\"text-sm mt-2\">USDT</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/token-img-demo.tsx")),
    source: "\"use client\";\n\nimport React from \"react\";\nimport { TokenImage } from \"@/registry/default/ui/token/token-img\";\n\nexport default function TokenImageDemo() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <h2 className=\"text-lg font-semibold\">Token Image Demo</h2>\n\n      <div className=\"flex items-center gap-4\">\n        {/* By symbol */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage tokenAddressOrSymbol=\"SOL\" size={48} />\n          <span className=\"text-sm mt-2\">SOL</span>\n        </div>\n\n        {/* By address (USDC mainnet) */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage\n            tokenAddressOrSymbol=\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n            size={48}\n          />\n          <span className=\"text-sm mt-2\">USDC</span>\n        </div>\n\n        {/* By address (USDT mainnet) */}\n        <div className=\"flex flex-col items-center\">\n          <TokenImage\n            tokenAddressOrSymbol=\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n            size={48}\n          />\n          <span className=\"text-sm mt-2\">USDT</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/token-img-demo.json",
  },
  "use-request-sol-airdrop": {
    name: "use-request-sol-airdrop",
    description: "A React hook for requesting SOL airdrops on Solana devnet/testnet with status tracking and error handling.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/token/use-request-sol-airdrop.tsx",
      content: "import { useState } from \"react\";\nimport { PublicKey, Connection, TransactionSignature } from \"@solana/web3.js\";\n\nexport type ErrorState = string | null;\nexport type StatusState = \"idle\" | \"loading\" | \"error\" | \"success\";\n\ntype AirdropResultState = {\n  transactionSignature: TransactionSignature;\n} | null;\n\n/**\n * Hook to request SOL airdrop for a given public key\n */\nexport function useRequestSolAirdrop(\n  publicKey: PublicKey | null,\n  connection: Connection,\n) {\n  const [error, setError] = useState<ErrorState>(null);\n  const [status, setStatus] = useState<StatusState>(\"idle\");\n  const [result, setResult] = useState<AirdropResultState>(null);\n\n  async function getSolAirdrop(\n    solana: number = 1,\n  ): Promise<AirdropResultState> {\n    try {\n      if (!publicKey) throw new Error(\"Wallet not connected\");\n\n      setStatus(\"loading\");\n      const lamports = solana * 1_000_000_000; // 1 SOL = 1_000_000_000 lamports\n\n      const transactionSignature = await connection.requestAirdrop(\n        publicKey,\n        lamports,\n      );\n\n      // Wait for confirmation\n      await connection.confirmTransaction(transactionSignature, \"confirmed\");\n\n      setResult({ transactionSignature });\n      setStatus(\"success\");\n\n      return { transactionSignature };\n    } catch (err) {\n      setError((err as Error).message);\n      setStatus(\"error\");\n      return null;\n    }\n  }\n\n  return { result, status, error, getSolAirdrop };\n}\n",
      type: "registry:hook",
    }],
    command: "https://soldevkit.com/r/use-request-sol-airdrop.json",
  },
  "use-transfer-token": {
    name: "use-transfer-token",
    description: "A React hook for transferring SOL or SPL tokens with wallet adapter integration and transaction confirmation.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/token/use-transfer-token.tsx",
      content: "import { useState } from \"react\";\nimport {\n  PublicKey,\n  Connection,\n  Transaction,\n  SystemProgram,\n  TransactionSignature,\n} from \"@solana/web3.js\";\nimport {\n  createTransferInstruction,\n  getAssociatedTokenAddress,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { WalletAdapterProps } from \"@solana/wallet-adapter-base\";\n\nexport type ErrorState = string | null;\nexport type StatusState = \"idle\" | \"loading\" | \"error\" | \"success\";\n\ntype TransferResultState = {\n  transactionSignature?: TransactionSignature;\n} | null;\n\n/**\n * Hook to transfer SOL or SPL tokens using a wallet adapter\n */\nexport function useTransferTokens(\n  publicKey: PublicKey | null,\n  connection: Connection,\n  sendTransaction: WalletAdapterProps[\"sendTransaction\"],\n) {\n  const [error, setError] = useState<ErrorState>(null);\n  const [status, setStatus] = useState<StatusState>(\"idle\");\n  const [result, setResult] = useState<TransferResultState>(null);\n\n  /**\n   * Transfer SOL or SPL tokens\n   * @param recipientAddress - recipient wallet address\n   * @param token - \"SOL\" or { mint: PublicKey } for SPL token\n   * @param amount - amount in SOL or token units\n   */\n  async function transferTokens(\n    recipientAddress: string,\n    token: \"SOL\" | { mint: PublicKey },\n    amount: number,\n  ): Promise<TransferResultState> {\n    try {\n      if (!publicKey) throw new Error(\"Wallet not connected\");\n      setStatus(\"loading\");\n\n      const recipientPubkey = new PublicKey(recipientAddress);\n      const transaction = new Transaction();\n\n      if (token === \"SOL\") {\n        // SOL transfer\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: publicKey,\n            toPubkey: recipientPubkey,\n            lamports: Math.round(amount * 1_000_000_000), // convert SOL to lamports\n          }),\n        );\n      } else {\n        // SPL token transfer\n        const senderATA = await getAssociatedTokenAddress(\n          token.mint,\n          publicKey,\n        );\n        const recipientATA = await getAssociatedTokenAddress(\n          token.mint,\n          recipientPubkey,\n        );\n\n        transaction.add(\n          createTransferInstruction(\n            senderATA,\n            recipientATA,\n            publicKey,\n            amount, // amount in smallest token units\n            [],\n            TOKEN_PROGRAM_ID,\n          ),\n        );\n      }\n\n      // Send transaction via wallet adapter\n      const txSig: TransactionSignature = await sendTransaction(\n        transaction,\n        connection,\n      );\n      await connection.confirmTransaction(txSig, \"confirmed\");\n\n      const res = { transactionSignature: txSig };\n      setResult(res);\n      setStatus(\"success\");\n\n      return res;\n    } catch (err) {\n      setError((err as Error).message);\n      setStatus(\"error\");\n      return null;\n    }\n  }\n\n  return { result, status, error, transferTokens };\n}\n",
      type: "registry:hook",
    }],
    command: "https://soldevkit.com/r/use-transfer-token.json",
  },
  "use-is-valid-txn": {
    name: "use-is-valid-txn",
    description: "A React hook for validating Solana transaction signatures and checking confirmation status.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/transaction/use-is-valid-txn.tsx",
      content: "import { useState, useEffect, useCallback } from \"react\";\nimport { TransactionSignature, Connection } from \"@solana/web3.js\";\n\nexport type ErrorState = string | null;\nexport type StatusState = \"idle\" | \"loading\" | \"error\" | \"success\";\ntype ValidResultState = { isValidTransaction: boolean } | null;\n\n/**\n * Check if a Solana transaction is valid (confirmed)\n */\nexport function useIsValidTransaction(\n  connection: Connection,\n  transactionSignature: TransactionSignature,\n  autoTrigger: boolean = true,\n) {\n  const [error, setError] = useState<ErrorState>(null);\n  const [status, setStatus] = useState<StatusState>(\"idle\");\n  const [result, setResult] = useState<ValidResultState>(null);\n\n  const fetchIsValidTransaction = useCallback(async () => {\n    try {\n      setStatus(\"loading\");\n\n      const tx = await connection.getParsedTransaction(transactionSignature, {\n        commitment: \"confirmed\",\n      });\n\n      setResult({ isValidTransaction: !!tx });\n      setStatus(\"success\");\n    } catch (err) {\n      setError((err as Error).message);\n      setStatus(\"error\");\n    }\n  }, [connection, transactionSignature]);\n\n  useEffect(() => {\n    if (autoTrigger) {\n      fetchIsValidTransaction();\n    }\n  }, [fetchIsValidTransaction, autoTrigger]);\n\n  return { result, status, error, fetchIsValidTransaction };\n}\n",
      type: "registry:hook",
    }],
    command: "https://soldevkit.com/r/use-is-valid-txn.json",
  },
  "use-txn-details": {
    name: "use-txn-details",
    description: "A React hook for fetching detailed Solana transaction information including parsed data and metadata.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/transaction/use-txn-details.tsx",
      content: "import { useState, useEffect, useCallback } from \"react\";\nimport {\n  TransactionSignature,\n  ParsedTransactionWithMeta,\n  Connection,\n} from \"@solana/web3.js\";\n\nexport type ErrorState = string | null;\nexport type StatusState = \"idle\" | \"loading\" | \"error\" | \"success\";\ntype DetailsResultState = {\n  transactionDetails: ParsedTransactionWithMeta;\n} | null;\n\n/**\n * Fetch Solana transaction details\n */\nexport function useTransactionDetails(\n  connection: Connection,\n  transactionSignature: TransactionSignature,\n  autoTrigger: boolean = true,\n) {\n  const [error, setError] = useState<ErrorState>(null);\n  const [status, setStatus] = useState<StatusState>(\"idle\");\n  const [result, setResult] = useState<DetailsResultState>(null);\n\n  const fetchTransactionDetails = useCallback(async () => {\n    try {\n      setStatus(\"loading\");\n\n      const tx = await connection.getParsedTransaction(transactionSignature, {\n        commitment: \"confirmed\",\n      });\n\n      if (!tx) throw new Error(\"Transaction not found\");\n\n      setResult({ transactionDetails: tx });\n      setStatus(\"success\");\n    } catch (err) {\n      setError((err as Error).message);\n      setStatus(\"error\");\n    }\n  }, [connection, transactionSignature]);\n\n  useEffect(() => {\n    if (autoTrigger) {\n      fetchTransactionDetails();\n    }\n  }, [fetchTransactionDetails, autoTrigger]);\n\n  return { result, status, error, fetchTransactionDetails };\n}\n",
      type: "registry:hook",
    }],
    command: "https://soldevkit.com/r/use-txn-details.json",
  },
  "use-wallet-token-balance": {
    name: "use-wallet-token-balance",
    description: "A React hook for fetching wallet token balances (SOL) with connection status and error handling.",
    type: "registry:hook",
    files: [{
      path: "src/registry/default/hooks/wallet/use-wallet-token-balance.tsx",
      content: "import { useState } from \"react\";\nimport { PublicKey, Connection } from \"@solana/web3.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { getLamportsToSol } from \"@/registry/default/utils/solana\";\n\nexport type ErrorState = string | null;\nexport type StatusState = \"idle\" | \"loading\" | \"error\" | \"success\";\ntype UserBalanceResultState = number;\n\n// safer invariant\nexport function invariant(\n  condition: unknown,\n  message?: string | (() => string),\n): asserts condition {\n  if (!condition) {\n    const msg = typeof message === \"function\" ? message() : message;\n    throw new Error(msg || \"Invariant failed\");\n  }\n}\n\nexport function useWalletTokenBalance(\n  publicKey: PublicKey | null,\n  connection: Connection,\n) {\n  const [error, setError] = useState<ErrorState>(null);\n  const [status, setStatus] = useState<StatusState>(\"idle\");\n  const [result, setResult] = useState<UserBalanceResultState>(0);\n\n  async function getWalletTokenBalance(\n    tokenSymbol: \"SOL\",\n    digitsToDisplay?: number,\n  ): Promise<number | null> {\n    try {\n      // explicit error for wallet not connected\n      if (!publicKey) throw new WalletNotConnectedError();\n\n      // explicit check for token type\n      invariant(tokenSymbol === \"SOL\", \"Only SOL is supported\");\n\n      setStatus(\"loading\");\n\n      const lamports = await connection.getBalance(publicKey);\n      const { sol } = getLamportsToSol(lamports, digitsToDisplay);\n\n      setResult(sol);\n      setStatus(\"success\");\n\n      return sol;\n    } catch (err) {\n      setError((err as Error).message);\n      setStatus(\"error\");\n      return null;\n    }\n  }\n\n  return { result, status, error, getWalletTokenBalance };\n}\n",
      type: "registry:hook",
    }],
    command: "https://soldevkit.com/r/use-wallet-token-balance.json",
  },
  "solana": {
    name: "solana",
    description: "Utility functions for Solana development including lamports/SOL conversion and number formatting.",
    type: "registry:lib",
    files: [{
      path: "src/registry/default/utils/solana.ts",
      content: "import { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\n/**\n * Convert lamports to SOL\n */\nexport function getLamportsToSol(\n  lamports: number,\n  digitsToDisplay?: number,\n): { sol: number } {\n  const sol = lamports / LAMPORTS_PER_SOL;\n  return { sol: digitsToDisplay ? toFixed(sol, digitsToDisplay) : sol };\n}\n\n/**\n * Convert SOL to lamports\n */\nexport function getSolToLamports(sol: number): { lamports: number } {\n  return { lamports: sol * LAMPORTS_PER_SOL };\n}\n\n/**\n * Round number to fixed digits\n */\nexport function toFixed(num: number, digits: number): number {\n  const factor = Math.pow(10, digits);\n  return Math.round(num * factor) / factor;\n}\n",
      type: "registry:lib",
    }],
    command: "https://soldevkit.com/r/solana.json",
  },
}