/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from "react";

export const Index: Record<string, any> ={
  "copy-button": {
    name: "copy-button",
    description: "A button with a copy to clipboard animation.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/button.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport { AnimatePresence, HTMLMotionProps, motion } from \"motion/react\";\nimport { CheckIcon, CopyIcon } from \"lucide-react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        muted: \"bg-muted text-muted-foreground\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n      },\n      size: {\n        default: \"size-8 rounded-lg [&_svg]:size-4\",\n        sm: \"size-6 [&_svg]:size-3\",\n        md: \"size-10 rounded-lg [&_svg]:size-5\",\n        lg: \"size-12 rounded-xl [&_svg]:size-6\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<HTMLMotionProps<\"button\">, \"children\" | \"onCopy\"> &\n  VariantProps<typeof buttonVariants> & {\n    content?: string;\n    delay?: number;\n    onCopy?: (content: string) => void;\n    isCopied?: boolean;\n    onCopyChange?: (isCopied: boolean) => void;\n  };\n\nfunction CopyButton({\n  content,\n  className,\n  size,\n  variant,\n  delay = 3000,\n  onClick,\n  onCopy,\n  isCopied,\n  onCopyChange,\n  ...props\n}: CopyButtonProps) {\n  const [localIsCopied, setLocalIsCopied] = React.useState(isCopied ?? false);\n  const Icon = localIsCopied ? CheckIcon : CopyIcon;\n\n  React.useEffect(() => {\n    setLocalIsCopied(isCopied ?? false);\n  }, [isCopied]);\n\n  const handleIsCopied = React.useCallback(\n    (isCopied: boolean) => {\n      setLocalIsCopied(isCopied);\n      onCopyChange?.(isCopied);\n    },\n    [onCopyChange],\n  );\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (isCopied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            handleIsCopied(true);\n            setTimeout(() => handleIsCopied(false), delay);\n            onCopy?.(content);\n          })\n          .catch((error) => {\n            console.error(\"Error copying command\", error);\n          });\n      }\n      onClick?.(e);\n    },\n    [isCopied, content, delay, onClick, onCopy, handleIsCopied],\n  );\n\n  return (\n    <motion.button\n      data-slot=\"copy-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className={cn(buttonVariants({ variant, size }), className)}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={localIsCopied ? \"check\" : \"copy\"}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/copy-button.json",
  },
  "wallet-connect-button": {
    name: "wallet-connect-button",
    description: "A Solana wallet connection button built on Once UI Button.",
    type: "registry:ui",
    files: [{
      path: "src/registry/default/ui/wallet/wallet-connect-button.tsx",
      content: "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@once-ui-system/core\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\n// Extend Once UI Button variants for Solana-specific styling\nconst walletButtonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md transition-colors\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:from-purple-600 hover:to-blue-600\",\n        outline:\n          \"border-2 border-purple-500 text-purple-500 hover:bg-purple-50\",\n        ghost: \"text-purple-600 hover:bg-purple-50\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-8 px-3 text-sm\",\n        lg: \"h-12 px-6 text-lg\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface WalletConnectButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof walletButtonVariants> {\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  showBalance?: boolean;\n}\n\nexport const WalletConnectButton = React.forwardRef<\n  HTMLButtonElement,\n  WalletConnectButtonProps\n>(\n  (\n    {\n      className,\n      variant,\n      size,\n      onConnect,\n      onDisconnect,\n      showBalance,\n      ...props\n    },\n    ref,\n  ) => {\n    const { connected, connecting, publicKey, disconnect } = useWallet();\n\n    const handleClick = async () => {\n      if (connected) {\n        await disconnect();\n        onDisconnect?.();\n      } else {\n        // Trigger wallet selection modal\n        onConnect?.();\n      }\n    };\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(walletButtonVariants({ variant, size }), className)}\n        onClick={handleClick}\n        disabled={connecting}\n        {...props}\n      >\n        {connecting ? (\n          \"Connecting...\"\n        ) : connected ? (\n          <>\n            {showBalance && publicKey && (\n              <span className=\"mr-2\">\n                {publicKey.toString().slice(0, 4)}...\n                {publicKey.toString().slice(-4)}\n              </span>\n            )}\n            Disconnect\n          </>\n        ) : (\n          \"Connect Wallet\"\n        )}\n      </Button>\n    );\n  },\n);\n\nWalletConnectButton.displayName = \"WalletConnectButton\";\n",
      type: "registry:ui",
    }],
    command: "https://soldevkit.com/r/wallet-connect-button.json",
  },
  "button-demo": {
    name: "button-demo",
    description: "Demo showing a button with copy to clipboard effect.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/button-demo.tsx",
      content: "import { CopyButton } from \"../ui/button\";\n\nexport default function CopyButtonDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <CopyButton content=\"Content to copy\" size=\"md\" />\n    </div>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/button-demo.tsx")),
    source: "import { CopyButton } from \"../ui/button\";\n\nexport default function CopyButtonDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <CopyButton content=\"Content to copy\" size=\"md\" />\n    </div>\n  );\n}\n",
    command: "https://soldevkit.com/r/button-demo.json",
  },
  "wallet-connect-button-demo": {
    name: "wallet-connect-button-demo",
    description: "Demo showcasing Solana wallet connection with different variants.",
    type: "registry:example",
    files: [{
      path: "src/registry/default/examples/wallet/wallet-connect-button-demo.tsx",
      content: "import { WalletConnectButton } from \"@/registry/default/ui/wallet/wallet-connect-button\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\nexport default function WalletConnectButtonDemo() {\n  const endpoint = useMemo(() => clusterApiUrl(\"devnet\"), []);\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n    [],\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <div className=\"flex flex-col items-center justify-center p-8 space-y-4\">\n          <WalletConnectButton variant=\"default\" size=\"lg\" showBalance />\n          <WalletConnectButton variant=\"outline\" size=\"default\" />\n          <WalletConnectButton variant=\"ghost\" size=\"sm\" />\n        </div>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n",
      type: "registry:example",
    }],
    component: React.lazy(() => import("@/registry/default/examples/wallet/wallet-connect-button-demo.tsx")),
    source: "import { WalletConnectButton } from \"@/registry/default/ui/wallet/wallet-connect-button\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\nexport default function WalletConnectButtonDemo() {\n  const endpoint = useMemo(() => clusterApiUrl(\"devnet\"), []);\n  const wallets = useMemo(\n    () => [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n    [],\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <div className=\"flex flex-col items-center justify-center p-8 space-y-4\">\n          <WalletConnectButton variant=\"default\" size=\"lg\" showBalance />\n          <WalletConnectButton variant=\"outline\" size=\"default\" />\n          <WalletConnectButton variant=\"ghost\" size=\"sm\" />\n        </div>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n",
    command: "https://soldevkit.com/r/wallet-connect-button-demo.json",
  },
}