{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "error-boundary",
  "type": "registry:ui",
  "title": "Error Boundary",
  "description": "Error boundary components for handling UI errors and API failures with retry functionality.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/error-boundary.tsx",
      "content": "\"use client\";\n\nimport React, { Component, ReactNode } from \"react\";\nimport { AlertTriangle, RefreshCw } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  className?: string;\n}\n\nexport class ErrorBoundary extends Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"ErrorBoundary caught an error:\", error, errorInfo);\n\n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // Call the onError callback if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div\n          className={cn(\n            \"flex flex-col items-center justify-center p-6 bg-destructive/10 border border-destructive/20 rounded-lg\",\n            this.props.className,\n          )}\n        >\n          <AlertTriangle className=\"h-8 w-8 text-destructive mb-4\" />\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n            Something went wrong\n          </h3>\n          <p className=\"text-sm text-muted-foreground text-center mb-4\">\n            {this.state.error?.message ||\n              \"An unexpected error occurred while loading this component.\"}\n          </p>\n          <button\n            onClick={this.handleRetry}\n            className=\"inline-flex items-center px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Try Again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Hook-based error boundary for functional components\nexport const useErrorHandler = () => {\n  const [error, setError] = React.useState<Error | null>(null);\n\n  const resetError = React.useCallback(() => {\n    setError(null);\n  }, []);\n\n  const handleError = React.useCallback((error: Error) => {\n    console.error(\"Error caught by useErrorHandler:\", error);\n    setError(error);\n  }, []);\n\n  React.useEffect(() => {\n    if (error) {\n      throw error;\n    }\n  }, [error]);\n\n  return { handleError, resetError, error };\n};\n\n// API Error Boundary specifically for API-related errors\ninterface APIErrorBoundaryProps {\n  children: ReactNode;\n  onRetry?: () => void;\n  className?: string;\n}\n\nexport const APIErrorBoundary: React.FC<APIErrorBoundaryProps> = ({\n  children,\n  onRetry,\n  className,\n}) => {\n  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {\n    // Log API errors for monitoring\n    console.error(\"API Error:\", {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n    });\n  };\n\n  const fallback = (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center p-4 bg-muted/50 border border-border rounded-lg\",\n        className,\n      )}\n    >\n      <AlertTriangle className=\"h-6 w-6 text-muted-foreground mb-2\" />\n      <p className=\"text-sm text-muted-foreground text-center mb-3\">\n        Failed to load data. Please check your connection and try again.\n      </p>\n      {onRetry && (\n        <button\n          onClick={onRetry}\n          className=\"inline-flex items-center px-3 py-1.5 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-colors\"\n        >\n          <RefreshCw className=\"h-3 w-3 mr-1\" />\n          Retry\n        </button>\n      )}\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallback={fallback}\n      onError={handleError}\n      className={className}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/error-boundary.tsx"
    }
  ]
}