{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "swap",
  "type": "registry:ui",
  "title": "Token Swap",
  "description": "A modern token swap interface with wallet integration, dark theme support, and real-time token data from Jupiter's verified token list.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/wallet-connect-button.json",
    "http://localhost:3000/r/utils.json",
    "http://localhost:3000/r/error-boundary.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/swap/swap.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"motion/react\";\nimport { clusterApiUrl, Connection, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { Repeat, ChevronDown } from \"lucide-react\";\nimport { WalletConnectButton } from \"@/components/soldevkit-ui/wallet/wallet-connect-button\";\nimport { cn, fetchJupiterTokens, type TokenInfo } from \"@/lib/utils\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nconst TokenDropdown: React.FC<{\n  selectedToken: TokenInfo | null;\n  onSelect: (token: TokenInfo) => void;\n  tokens: TokenInfo[];\n}> = ({ selectedToken, onSelect, tokens }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleSelect = (token: TokenInfo) => {\n    onSelect(token);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full p-2 bg-muted border border-border rounded-md shadow-sm flex items-center justify-between text-left focus:outline-none focus:ring-2 focus:ring-ring transition-colors duration-200\"\n      >\n        {selectedToken ? (\n          <div className=\"flex items-center w-28\">\n            <OptimizedImage\n              src={selectedToken.logoURI || \"/placeholder-token.png\"}\n              alt={`${selectedToken.name} logo`}\n              className=\"w-6 h-6 mr-2 rounded-full\"\n              fallbackSrc=\"/placeholder-token.png\"\n              lazy={false}\n            />\n            <span className=\"font-medium text-foreground\">\n              {selectedToken.symbol}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground w-28\">Select a token</span>\n        )}\n        <ChevronDown\n          className={cn(\n            \"w-5 h-5 text-muted-foreground transition-transform duration-200\",\n            isOpen && \"transform rotate-180\",\n          )}\n        />\n      </button>\n\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -10 }}\n          transition={{ duration: 0.2 }}\n          className=\"absolute z-10 w-full mt-1 bg-card border border-border rounded-md shadow-lg max-h-[300px] overflow-y-auto\"\n        >\n          <ul className=\"max-h-60 overflow-y-auto\">\n            {tokens.map((token) => (\n              <li key={token.address}>\n                <button\n                  type=\"button\"\n                  onClick={() => handleSelect(token)}\n                  className=\"w-full p-2 text-left hover:bg-muted flex items-center transition-colors duration-200\"\n                >\n                  <OptimizedImage\n                    src={token.logoURI || \"/placeholder-token.png\"}\n                    alt={`${token.name} logo`}\n                    className=\"w-6 h-6 mr-2 rounded-full\"\n                    fallbackSrc=\"/placeholder-token.png\"\n                    lazy={false}\n                  />\n                  <span className=\"font-medium text-foreground\">\n                    {token.symbol}\n                  </span>\n                </button>\n              </li>\n            ))}\n          </ul>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nconst SwapUIContent: React.FC = () => {\n  const { publicKey, connected } = useWallet();\n  const [fromToken, setFromToken] = useState<TokenInfo | null>(null);\n  const [toToken, setToToken] = useState<TokenInfo | null>(null);\n  const [fromAmount, setFromAmount] = useState<string>(\"\");\n  const [toAmount, setToAmount] = useState<string>(\"\");\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\n  const [solBalance, setSolBalance] = useState<number>(0);\n  const [conversionRate, setConversionRate] = useState<number>(2);\n  const [tokenError, setTokenError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadTokens = async () => {\n      try {\n        setTokenError(null);\n        const data = await fetchJupiterTokens();\n        setTokens(data);\n      } catch (error) {\n        console.error(\"Failed to fetch tokens\", error);\n        setTokenError(\n          error instanceof Error ? error.message : \"Failed to load tokens\",\n        );\n      }\n    };\n    loadTokens();\n  }, []);\n\n  useEffect(() => {\n    const fetchSolBalance = async () => {\n      if (!publicKey || !connected) {\n        setSolBalance(0);\n        return;\n      }\n      try {\n        const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n        const balance = await connection.getBalance(publicKey);\n        setSolBalance(balance / LAMPORTS_PER_SOL);\n      } catch (error) {\n        console.error(\"Failed to fetch SOL balance\", error);\n        setSolBalance(0);\n      }\n    };\n    fetchSolBalance();\n  }, [publicKey, connected]);\n\n  // Throw error if token loading fails\n  if (tokenError) {\n    throw new Error(tokenError);\n  }\n\n  const handleMaxClick = () => {\n    setFromAmount(solBalance.toString());\n    const toValue = (solBalance * conversionRate).toFixed(6);\n    setToAmount(toValue);\n  };\n\n  const handleHalfClick = () => {\n    const halfBalance = solBalance / 2;\n    setFromAmount(halfBalance.toString());\n    const toValue = (halfBalance * conversionRate).toFixed(6);\n    setToAmount(toValue);\n  };\n\n  const handleSwapTokens = () => {\n    const tempToken = fromToken;\n    setFromToken(toToken);\n    setToToken(tempToken);\n\n    const newFromAmount = toAmount;\n    const newToAmount =\n      newFromAmount && !isNaN(parseFloat(newFromAmount))\n        ? (parseFloat(newFromAmount) * conversionRate).toString()\n        : \"\";\n\n    setFromAmount(newFromAmount);\n    setToAmount(newToAmount);\n\n    setConversionRate((prevRate) => (prevRate !== 0 ? 1 / prevRate : prevRate));\n  };\n\n  const handleFromAmountChange = (value: string) => {\n    setFromAmount(value);\n    if (value && !isNaN(parseFloat(value))) {\n      const toValue = (parseFloat(value) * conversionRate).toFixed(6);\n      setToAmount(toValue);\n    } else {\n      setToAmount(\"\");\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"p-4 rounded-lg max-w-[600px] mx-auto bg-card shadow-md border border-border\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Wallet Connection Section */}\n      {!connected && (\n        <div className=\"mb-4 p-4 bg-muted/50 border border-border rounded-lg\">\n          <p className=\"text-sm text-muted-foreground mb-2\">\n            Connect your wallet to start swapping tokens\n          </p>\n          <div className=\"flex justify-center\">\n            <WalletConnectButton variant=\"default\" size=\"sm\" />\n          </div>\n        </div>\n      )}\n\n      <div className=\"-space-y-3\">\n        {/* From Section */}\n        <motion.div\n          className=\"p-4 rounded-lg bg-muted border border-border\"\n          initial={{ scale: 0.95 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-sm text-muted-foreground\">\n              You&apos;re selling\n            </span>\n            <div className=\"flex space-x-2\">\n              <div className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                {parseFloat(fromAmount || \"0\").toFixed(2)}\n              </div>\n              <button\n                onClick={handleHalfClick}\n                className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md hover:bg-accent transition-colors\"\n              >\n                HALF\n              </button>\n              <button\n                onClick={handleMaxClick}\n                className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md hover:bg-accent transition-colors\"\n              >\n                MAX\n              </button>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <TokenDropdown\n              selectedToken={fromToken}\n              onSelect={setFromToken}\n              tokens={tokens}\n            />\n            <input\n              type=\"number\"\n              value={fromAmount}\n              onChange={(e) => handleFromAmountChange(e.target.value)}\n              className=\"bg-transparent text-right outline-none text-foreground w-1/2\"\n              placeholder=\"0.00\"\n              min=\"0\"\n            />\n          </div>\n        </motion.div>\n\n        {/* Swap Button */}\n        <div className=\"flex justify-center\">\n          <motion.button\n            onClick={handleSwapTokens}\n            className=\"bg-background cursor-pointer p-2 rounded-md transition-colors border border-border\"\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            disabled={!fromToken || !toToken}\n            title=\"Swap Tokens\"\n          >\n            <Repeat className=\"rotate-90 text-muted-foreground\" />\n          </motion.button>\n        </div>\n\n        {/* To Section */}\n        <motion.div\n          className=\"p-4 rounded-lg bg-muted border border-border\"\n          initial={{ scale: 0.95 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-sm text-muted-foreground\">\n              You&apos;re buying\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <TokenDropdown\n              selectedToken={toToken}\n              onSelect={setToToken}\n              tokens={tokens}\n            />\n            <div className=\"flex flex-col justify-end items-end\">\n              <div className=\"pr-3\">\n                <div className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                  {parseFloat(fromAmount || \"0\").toFixed(2)}\n                </div>\n              </div>\n              <input\n                type=\"number\"\n                value={toAmount}\n                readOnly\n                className=\"bg-transparent outline-none text-right text-foreground w-full mt-1\"\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Submit Button */}\n      <motion.div\n        className={`mt-4 ${\n          fromAmount && fromToken && toToken\n            ? \"cursor-pointer\"\n            : \"cursor-not-allowed\"\n        }`}\n        initial={{ opacity: 0 }}\n        animate={{ opacity: fromAmount && fromToken && toToken ? 1 : 0.5 }}\n        transition={{ duration: 0.5 }}\n      >\n        <button\n          className={cn(\n            \"w-full py-3 rounded-lg transition-all\",\n            fromAmount && fromToken && toToken\n              ? \"bg-primary text-primary-foreground hover:scale-95\"\n              : \"bg-muted text-muted-foreground cursor-not-allowed\",\n          )}\n          disabled={!fromAmount || !fromToken || !toToken}\n        >\n          {fromAmount ? \"Swap\" : \"Enter an amount\"}\n        </button>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nconst SwapUI: React.FC = () => {\n  return (\n    <APIErrorBoundary onRetry={() => window.location.reload()}>\n      <SwapUIContent />\n    </APIErrorBoundary>\n  );\n};\n\nexport default SwapUI;\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/swap/swap.tsx"
    }
  ]
}