{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "optimized-image",
  "type": "registry:ui",
  "title": "Optimized Image",
  "description": "A framework-agnostic image component with Next.js optimization detection, lazy loading, error handling, and accessibility features.",
  "dependencies": [],
  "registryDependencies": [
    "https://soldevkit.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/optimized-image/optimized-image.tsx",
      "content": "// UniversalImage.tsx\nimport React from \"react\";\n\n// Define props that work for both <img> and next/image\nexport interface UniversalImageProps {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  priority?: boolean; // only used in Next.js\n  style?: React.CSSProperties;\n  fallbackSrc?: string; // fallback image source\n  lazy?: boolean; // lazy loading (ignored in this simple implementation)\n}\n\n// Try to dynamically import next/image if available\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet NextImage: any;\ntry {\n  // This will only work in Next.js\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  NextImage = require(\"next/image\").default;\n} catch {\n  NextImage = null;\n}\n\nexport const UniversalImage: React.FC<UniversalImageProps> = (props) => {\n  const { src, alt, width, height, priority, className, style, fallbackSrc, lazy, ...rest } = props;\n  \n  if (NextImage) {\n    // Running in Next.js → use next/image\n    // If width/height not provided, use fill mode or provide defaults\n    if (!width || !height) {\n      return (\n        <div className={className} style={{ position: 'relative', ...style }}>\n          <NextImage\n            src={src}\n            alt={alt}\n            fill\n            priority={priority}\n            onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n               if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n                 e.currentTarget.src = fallbackSrc;\n               }\n             }}\n            {...rest}\n          />\n        </div>\n      );\n    }\n    \n    return (\n      <NextImage\n        src={src}\n        alt={alt}\n        width={width}\n        height={height}\n        priority={priority}\n        className={className}\n        style={style}\n        onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n           if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n             e.currentTarget.src = fallbackSrc;\n           }\n         }}\n        {...rest}\n      />\n    );\n  }\n\n  // Running in plain React → fallback to <img>\n  return (\n    // eslint-disable-next-line @next/next/no-img-element\n    <img\n      src={src}\n      alt={alt}\n      width={width}\n      height={height}\n      className={className}\n      style={style}\n      loading={lazy ? \"lazy\" : \"eager\"}\n      onError={(e) => {\n        if (fallbackSrc && e.currentTarget.src !== fallbackSrc) {\n          e.currentTarget.src = fallbackSrc;\n        }\n      }}\n      {...rest}\n    />\n  );\n};\n\n// Export as OptimizedImage for backward compatibility\nexport const OptimizedImage = UniversalImage;\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/optimized-image/optimized-image.tsx"
    }
  ]
}