{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wallet-connect-button",
  "type": "registry:ui",
  "title": "Wallet Connect Button",
  "description": "A comprehensive Solana wallet connection button with modal dialog, dropdown menu, and wallet management features.",
  "dependencies": [
    "@solana/wallet-adapter-react",
    "@solana/wallet-adapter-base",
    "@solana/wallet-adapter-react-ui",
    "@solana/wallet-adapter-wallets",
    "@solana/web3.js",
    "@radix-ui/react-dialog",
    "@radix-ui/react-collapsible",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://soldevkit.com/r/button.json",
    "https://soldevkit.com/r/dialog.json",
    "https://soldevkit.com/r/collapsible.json",
    "https://soldevkit.com/r/dropdown-menu.json",
    "https://soldevkit.com/r/badge.json",
    "https://soldevkit.com/r/provider.json",
    "https://soldevkit.com/r/utils.json",
    "https://soldevkit.com/r/optimized-image.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/wallet/wallet-connect-button.tsx",
      "content": "\"use client\";\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName, WalletReadyState } from \"@solana/wallet-adapter-base\";\nimport { Button } from \"@/components/soldevkit-ui/button\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/soldevkit-ui/dialog\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/soldevkit-ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/soldevkit-ui/dropdown-menu\";\nimport { Badge } from \"@/components/soldevkit-ui/badge\";\nimport { Loader2, ChevronDown } from \"lucide-react\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\n// Constants\nconst LABELS = {\n  \"change-wallet\": \"Change Wallet\",\n  connecting: \"Connecting...\",\n  \"copy-address\": \"Copy Address\",\n  copied: \"Copied\",\n  disconnect: \"Disconnect\",\n  \"has-wallet\": \"Connect Wallet\",\n  \"no-wallet\": \"Select Wallet\",\n} as const;\n\n// Types\ntype WalletButtonProps = React.ComponentProps<\"button\"> & {\n  labels?: Partial<Record<keyof typeof LABELS, string>>;\n  variant?:\n    | \"default\"\n    | \"destructive\"\n    | \"outline\"\n    | \"secondary\"\n    | \"ghost\"\n    | \"link\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  icon?: React.ReactNode;\n};\n\n// Enhanced Wallet Modal Component\nexport const WalletModal: React.FC<{\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}> = ({ open, onOpenChange }) => {\n  const { wallets, select, connecting, connected } = useWallet();\n  const [expanded, setExpanded] = useState(false);\n\n  // Memoize wallet lists\n  const { listedWallets, collapsedWallets } = useMemo(() => {\n    const installed = wallets.filter(\n      (w) => w.readyState === WalletReadyState.Installed,\n    );\n    const notInstalled = wallets.filter(\n      (w) => w.readyState !== WalletReadyState.Installed,\n    );\n    return {\n      listedWallets: installed.length ? installed : notInstalled,\n      collapsedWallets: installed.length ? notInstalled : [],\n    };\n  }, [wallets]);\n\n  const handleWalletClick = useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>, walletName: string) => {\n      event.preventDefault();\n      try {\n        select(walletName as WalletName);\n        // The wallet will automatically attempt to connect after selection\n        // due to the autoConnect prop in WalletProvider\n      } catch (error) {\n        console.error(\"Failed to select wallet:\", error);\n        // You could add toast notification here\n      }\n    },\n    [select],\n  );\n\n  // Close modal when wallet connects successfully\n  useEffect(() => {\n    if (connected) {\n      onOpenChange(false);\n    }\n  }, [connected, onOpenChange]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Connect wallet to continue</DialogTitle>\n          <DialogDescription>\n            Choose your preferred wallet to connect to this dApp.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Main wallet list */}\n          {listedWallets.map((wallet) => (\n            <button\n              key={wallet.adapter.name}\n              onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n              disabled={connecting}\n              className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                {wallet.adapter.icon && (\n                  <OptimizedImage\n                    src={wallet.adapter.icon}\n                    alt={`${wallet.adapter.name} icon`}\n                    className=\"h-5 w-5\"\n                    fallbackSrc=\"/placeholder.svg\"\n                    lazy={false}\n                  />\n                )}\n                <span className=\"font-medium\">{wallet.adapter.name}</span>\n                {connecting && (\n                  <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                )}\n              </div>\n              <Badge variant=\"outline\">\n                {wallet.readyState === WalletReadyState.Installed\n                  ? \"Installed\"\n                  : \"Not Installed\"}\n              </Badge>\n            </button>\n          ))}\n\n          {/* Collapsible section for additional wallets */}\n          {collapsedWallets.length > 0 && (\n            <Collapsible open={expanded} onOpenChange={setExpanded}>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-between\">\n                  <span>More wallet options</span>\n                  <ChevronDown className=\"h-4 w-4\" />\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"space-y-2\">\n                {collapsedWallets.map((wallet) => (\n                  <button\n                    key={wallet.adapter.name}\n                    onClick={(e) => handleWalletClick(e, wallet.adapter.name)}\n                    disabled={connecting}\n                    className=\"flex w-full items-center justify-between rounded-lg p-3 text-left transition-colors hover:bg-secondary disabled:opacity-50\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      {wallet.adapter.icon && (\n                        <OptimizedImage\n                          src={wallet.adapter.icon}\n                          alt={`${wallet.adapter.name} icon`}\n                          className=\"h-5 w-5\"\n                          fallbackSrc=\"/placeholder.svg\"\n                          lazy={false}\n                        />\n                      )}\n                      <span className=\"font-medium\">{wallet.adapter.name}</span>\n                    </div>\n                    <Badge variant=\"outline\">\n                      {wallet.readyState === WalletReadyState.Installed\n                        ? \"Installed\"\n                        : \"Not Installed\"}\n                    </Badge>\n                  </button>\n                ))}\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n        </div>\n\n        <DialogClose asChild>\n          <Button variant=\"outline\" className=\"w-full mt-4\">\n            Close\n          </Button>\n        </DialogClose>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Main Wallet Button Component\nexport function WalletConnectButton({\n  children,\n  labels = LABELS,\n  icon,\n  ...props\n}: WalletButtonProps) {\n  const [walletModalOpen, setWalletModalOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [mounted, setMounted] = useState(false);\n\n  const { publicKey, wallet, disconnect, connecting, connected } = useWallet();\n\n  const content = useMemo(() => {\n    if (!mounted) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          <span>{labels[\"no-wallet\"]}</span>\n        </div>\n      );\n    }\n\n    if (children) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          {children}\n        </div>\n      );\n    } else if (connecting) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <span>{labels[\"connecting\"]}</span>\n        </div>\n      );\n    }\n\n    // Show wallet info when connected\n    if (connected && publicKey) {\n      return (\n        <div className=\"flex items-center gap-2\">\n          {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n          {wallet?.adapter.icon && (\n            <OptimizedImage\n              src={wallet.adapter.icon}\n              alt={`${wallet.adapter.name} icon`}\n              className=\"h-5 w-5\"\n              fallbackSrc=\"/placeholder.svg\"\n              lazy={false}\n            />\n          )}\n          <span>\n            {`${publicKey.toBase58().slice(0, 6)}...${publicKey.toBase58().slice(-4)}`}\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center gap-2\">\n        {icon && <span className=\"flex-shrink-0\">{icon}</span>}\n        <span>{labels[\"has-wallet\"]}</span>\n      </div>\n    );\n  }, [\n    mounted,\n    children,\n    connecting,\n    connected,\n    publicKey,\n    wallet,\n    labels,\n    icon,\n  ]);\n\n  const handleCopyAddress = useCallback(async () => {\n    if (publicKey) {\n      await navigator.clipboard.writeText(publicKey.toBase58());\n      setCopied(true);\n      setTimeout(() => setCopied(false), 400);\n    }\n  }, [publicKey]);\n\n  const handleDisconnect = useCallback(() => {\n    disconnect();\n    setMenuOpen(false);\n  }, [disconnect]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!connected) {\n    return (\n      <>\n        <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n        <Button\n          {...props}\n          onClick={() => {\n            // Try custom modal first, fallback to standard modal\n            setWalletModalOpen(true);\n            // Alternative: setVisible(true);\n          }}\n        >\n          {content}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <WalletModal open={walletModalOpen} onOpenChange={setWalletModalOpen} />\n      <DropdownMenu open={menuOpen} onOpenChange={setMenuOpen}>\n        <DropdownMenuTrigger asChild>\n          <Button {...props}>{content}</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          {publicKey && (\n            <DropdownMenuItem onClick={handleCopyAddress}>\n              {copied ? labels[\"copied\"] : labels[\"copy-address\"]}\n            </DropdownMenuItem>\n          )}\n          <DropdownMenuItem\n            onClick={() => {\n              setWalletModalOpen(true);\n              setMenuOpen(false);\n            }}\n          >\n            {labels[\"change-wallet\"]}\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleDisconnect}>\n            {labels[\"disconnect\"]}\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/wallet/wallet-connect-button.tsx"
    }
  ]
}