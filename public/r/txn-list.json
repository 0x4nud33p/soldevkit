{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "txn-list",
  "type": "registry:ui",
  "title": "Transaction List",
  "description": "A component for displaying a list of Solana transactions with details like signature, block, time, sender, and fee.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "date-fns",
    "lucide-react"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/table.json",
    "http://localhost:3000/r/skeleton.json",
    "http://localhost:3000/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/transaction/txn-list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\n\nimport {\n  VersionedTransactionResponse,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\nimport { useConnection } from \"@solana/wallet-adapter-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { AlertCircleIcon, ExternalLinkIcon } from \"lucide-react\";\n\nimport { shortAddress, cn } from \"@/lib/utils\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/soldevkit-ui/table\";\nimport { Skeleton } from \"@/components/soldevkit-ui/skeleton\";\n\ntype TxnListProps = {\n  transactions: VersionedTransactionResponse[];\n  onClick?: (txn: VersionedTransactionResponse) => void;\n};\n\nconst TxnList = ({ transactions, onClick }: TxnListProps) => {\n  const { connection } = useConnection();\n  const [currentSlot, setCurrentSlot] = React.useState<number | null>(null);\n  const [averageBlockTime, setAverageBlockTime] = React.useState<number>(0.4);\n\n  React.useEffect(() => {\n    const init = async () => {\n      try {\n        const [slot, recentPerformanceSamples] = await Promise.all([\n          connection.getSlot(),\n          connection.getRecentPerformanceSamples(30),\n        ]);\n\n        const totalSampleSeconds = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.samplePeriodSecs,\n          0,\n        );\n        const totalSamples = recentPerformanceSamples.reduce(\n          (acc, sample) => acc + sample.numSlots,\n          0,\n        );\n        const calculatedAverageBlockTime = totalSampleSeconds / totalSamples;\n\n        setCurrentSlot(slot);\n        setAverageBlockTime(calculatedAverageBlockTime);\n      } catch (error) {\n        console.error(\"Error fetching block time:\", error);\n      }\n    };\n\n    if (!connection) return;\n    init();\n  }, [connection]);\n\n  const estimateTimestamp = (blockTime: number | null | undefined) => {\n    if (blockTime === null || blockTime === undefined || currentSlot === null) {\n      return \"Unknown\";\n    }\n    const currentTime = Date.now() / 1000;\n    const blockDifference = currentSlot - blockTime;\n    const estimatedTimestamp = currentTime - blockDifference * averageBlockTime;\n    return formatDistanceToNow(new Date(estimatedTimestamp * 1000), {\n      addSuffix: true,\n    });\n  };\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow className=\"hover:bg-transparent\">\n          <TableHead>Signature</TableHead>\n          <TableHead>Block</TableHead>\n          <TableHead>Time</TableHead>\n          <TableHead>By</TableHead>\n          <TableHead>Fee</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {transactions.length === 0 ? (\n          <>\n            {[...Array(5)].map((_, index) => (\n              <TableRow key={index} className=\"hover:bg-transparent\">\n                {[...Array(5)].map((_, index) => (\n                  <TableCell key={index}>\n                    <Skeleton className=\"h-[22px] w-full\" />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </>\n        ) : (\n          transactions.map((txn) => (\n            <TableRow\n              key={txn.transaction.signatures[0]}\n              className={cn(\n                \"group odd:bg-muted/25 hover:bg-transparent hover:text-primary hover:odd:bg-muted/25\",\n                onClick && \"cursor-pointer\",\n              )}\n              onClick={() => onClick && onClick(txn)}\n            >\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/tx/${txn.transaction.signatures[0]}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <ExternalLinkIcon size={16} />\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(txn.transaction.signatures[0])}\n                  </span>\n                  {txn.meta?.err && (\n                    <AlertCircleIcon className=\"h-4 w-4 text-destructive\" />\n                  )}\n                </Link>\n              </TableCell>\n              <TableCell>{txn.blockTime}</TableCell>\n              <TableCell>{estimateTimestamp(txn.slot)}</TableCell>\n              <TableCell>\n                <Link\n                  href={`https://solscan.io/account/${txn.transaction.message.staticAccountKeys[0]}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"group inline-flex items-center gap-1\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <ExternalLinkIcon size={16} />\n                  <span className=\"border-b border-transparent group-hover:border-border\">\n                    {shortAddress(txn.transaction.message.staticAccountKeys[0])}\n                  </span>\n                </Link>\n              </TableCell>\n              <TableCell>{(txn.meta?.fee || 0) / LAMPORTS_PER_SOL}</TableCell>\n            </TableRow>\n          ))\n        )}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default TxnList;\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/transaction/txn-list.tsx"
    }
  ]
}