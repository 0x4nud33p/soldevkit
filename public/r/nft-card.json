{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nft-card",
  "type": "registry:ui",
  "title": "NFT Card",
  "description": "A component for displaying NFT metadata with image, attributes, and collection information using Alchemy API.",
  "dependencies": [
    "@solana/web3.js",
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/card.json",
    "http://localhost:3000/r/skeleton.json",
    "http://localhost:3000/r/badge.json",
    "http://localhost:3000/r/utils.json",
    "http://localhost:3000/r/error-boundary.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/nft/nft-card.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  cn,\n  shortAddress,\n  fetchNFTMetadata,\n  type NFTMetadata,\n} from \"@/lib/utils\";\nimport { motion } from \"motion/react\";\nimport { ExternalLink, Image as ImageIcon, Loader2 } from \"lucide-react\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nexport interface NFTCardProps {\n  /** The mint address of the NFT */\n  mintAddress: string | PublicKey;\n  /** Custom CSS classes */\n  className?: string;\n  /** Show NFT attributes */\n  showAttributes?: boolean;\n  /** Show collection info */\n  showCollection?: boolean;\n  /** Card variant */\n  variant?: \"default\" | \"compact\" | \"detailed\";\n  /** Loading state */\n  isLoading?: boolean;\n  /** Click handler */\n  onClick?: () => void;\n  /** Custom metadata (bypasses fetching) */\n  metadata?: NFTMetadata;\n}\n\nconst NFTCardContent = React.forwardRef<HTMLDivElement, NFTCardProps>(\n  (\n    {\n      mintAddress,\n      className,\n      showAttributes = false,\n      showCollection = true,\n      variant = \"default\",\n      isLoading: externalLoading = false,\n      onClick,\n      metadata: customMetadata,\n      ...props\n    },\n    ref,\n  ) => {\n    const mintStr = React.useMemo(() => {\n      return typeof mintAddress === \"string\"\n        ? mintAddress\n        : mintAddress.toBase58();\n    }, [mintAddress]);\n\n    const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n    const [queryLoading, setQueryLoading] = useState(false);\n    const [error, setError] = useState<Error | null>(null);\n\n    useEffect(() => {\n      if (!customMetadata && mintStr) {\n        setQueryLoading(true);\n        setError(null);\n\n        fetchNFTMetadata(mintStr)\n          .then((data) => {\n            setMetadata(data);\n            setQueryLoading(false);\n          })\n          .catch((err) => {\n            setError(err);\n            setQueryLoading(false);\n            throw err;\n          });\n      }\n    }, [mintStr, customMetadata]);\n\n    const finalMetadata = customMetadata || metadata;\n    const isLoading = externalLoading || queryLoading;\n\n    const cardVariants = {\n      default: \"p-4 space-y-3\",\n      compact: \"p-3 space-y-2\",\n      detailed: \"p-6 space-y-4\",\n    };\n\n    const imageVariants = {\n      default: \"h-48\",\n      compact: \"h-32\",\n      detailed: \"h-64\",\n    };\n\n    if (isLoading) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"relative overflow-hidden rounded-lg border bg-card text-card-foreground shadow-sm\",\n            cardVariants[variant],\n            className,\n          )}\n          {...props}\n        >\n          <div\n            className={cn(\n              \"flex items-center justify-center bg-muted rounded-md\",\n              imageVariants[variant],\n            )}\n          >\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"h-4 bg-muted rounded animate-pulse\" />\n            <div className=\"h-3 bg-muted rounded w-2/3 animate-pulse\" />\n          </div>\n        </div>\n      );\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    if (!finalMetadata) {\n      return (\n        <div\n          ref={ref}\n          className={cn(\n            \"relative overflow-hidden rounded-lg border bg-card text-card-foreground shadow-sm\",\n            cardVariants[variant],\n            className,\n          )}\n          {...props}\n        >\n          <div\n            className={cn(\n              \"flex items-center justify-center bg-muted rounded-md\",\n              imageVariants[variant],\n            )}\n          >\n            <ImageIcon className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n          <div className=\"space-y-1\">\n            <h3 className=\"font-semibold text-sm\">No NFT data</h3>\n            <p className=\"text-xs text-muted-foreground\">\n              {shortAddress(mintStr)}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"relative overflow-hidden rounded-lg border bg-card text-card-foreground shadow-sm transition-all duration-200\",\n          onClick && \"cursor-pointer hover:shadow-md hover:scale-[1.02]\",\n          cardVariants[variant],\n          className,\n        )}\n        onClick={onClick}\n        whileHover={onClick ? { y: -2 } : undefined}\n        whileTap={onClick ? { scale: 0.98 } : undefined}\n        {...props}\n      >\n        {/* NFT Image */}\n        <div\n          className={cn(\n            \"relative overflow-hidden rounded-md bg-muted\",\n            imageVariants[variant],\n          )}\n        >\n          {finalMetadata.image ? (\n            <OptimizedImage\n              src={finalMetadata.image}\n              alt={finalMetadata.name || shortAddress(mintStr)} // ✅ fallback to short address\n              className=\"h-full w-full object-cover transition-transform duration-200 hover:scale-105\"\n              fallbackSrc=\"/placeholder-nft.png\"\n              lazy={true}\n            />\n          ) : (\n            <div className=\"flex h-full items-center justify-center\">\n              <ImageIcon className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          )}\n\n          {finalMetadata.external_url && (\n            <div className=\"absolute top-2 right-2\">\n              <a\n                href={finalMetadata.external_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex h-6 w-6 items-center justify-center rounded-full bg-black/50 text-white hover:bg-black/70 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n              </a>\n            </div>\n          )}\n        </div>\n\n        {/* NFT Info */}\n        <div className=\"space-y-2\">\n          <div>\n            <h3\n              className={cn(\n                \"font-semibold leading-tight\",\n                variant === \"compact\" ? \"text-sm\" : \"text-base\",\n              )}\n            >\n              {finalMetadata.name || shortAddress(mintStr)} {/* ✅ fallback */}\n            </h3>\n\n            {showCollection && finalMetadata.collection?.name && (\n              <p className=\"text-xs text-muted-foreground\">\n                {shortAddress(finalMetadata.collection.name)}\n              </p>\n            )}\n          </div>\n\n          {finalMetadata.description && variant !== \"compact\" && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2\">\n              {finalMetadata.description}\n            </p>\n          )}\n\n          {showAttributes &&\n            finalMetadata.attributes &&\n            finalMetadata.attributes.length > 0 && (\n              <div className=\"space-y-1\">\n                <p className=\"text-xs font-medium text-muted-foreground\">\n                  Attributes\n                </p>\n                <div className=\"flex flex-wrap gap-1\">\n                  {finalMetadata.attributes\n                    .slice(0, variant === \"detailed\" ? 6 : 3)\n                    .map((attr, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-flex items-center rounded-full bg-secondary px-2 py-1 text-xs font-medium\"\n                      >\n                        {attr.trait_type}: {attr.value}\n                      </span>\n                    ))}\n                  {finalMetadata.attributes.length >\n                    (variant === \"detailed\" ? 6 : 3) && (\n                    <span className=\"inline-flex items-center rounded-full bg-muted px-2 py-1 text-xs text-muted-foreground\">\n                      +\n                      {finalMetadata.attributes.length -\n                        (variant === \"detailed\" ? 6 : 3)}{\" \"}\n                      more\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n        </div>\n      </motion.div>\n    );\n  },\n);\n\nNFTCardContent.displayName = \"NFTCardContent\";\n\nconst NFTCard = React.forwardRef<HTMLDivElement, NFTCardProps>((props, ref) => {\n  return (\n    <APIErrorBoundary onRetry={() => window.location.reload()}>\n      <NFTCardContent {...props} ref={ref} />\n    </APIErrorBoundary>\n  );\n});\n\nNFTCard.displayName = \"NFTCard\";\n\nexport { NFTCard };\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/nft/nft-card.tsx"
    }
  ]
}