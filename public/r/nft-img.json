{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nft-img",
  "type": "registry:ui",
  "title": "NFT Image",
  "description": "A component for displaying NFT images with loading states and fallback handling.",
  "dependencies": [
    "@solana/web3.js",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://soldevkit.com/r/utils.json",
    "https://soldevkit.com/r/error-boundary.json",
    "https://soldevkit.com/r/optimized-image.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/nft/nft-img.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Loader2, Image as ImageIcon } from \"lucide-react\";\nimport { fetchNFTMetadata, type NFTMetadata, cn } from \"@/lib/utils\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\nexport interface NFTImageProps {\n  /** The mint address of the NFT */\n  mintAddress: string | PublicKey;\n  /** Custom CSS classes */\n  className?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Loading state */\n  isLoading?: boolean;\n}\n\nconst NFTImageContent: React.FC<NFTImageProps> = ({\n  mintAddress,\n  className,\n  alt,\n  isLoading: externalLoading = false,\n}) => {\n  const mintStr =\n    typeof mintAddress === \"string\" ? mintAddress : mintAddress.toBase58();\n\n  const [metadata, setMetadata] = useState<NFTMetadata | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (mintStr) {\n      setLoading(true);\n      setError(null);\n      fetchNFTMetadata(mintStr)\n        .then((data) => setMetadata(data))\n        .catch((error) => {\n          console.error(\"Error fetching NFT metadata:\", error);\n          setError(\n            error instanceof Error ? error.message : \"Failed to load NFT\",\n          );\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [mintStr]);\n\n  const isLoading = externalLoading || loading;\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-md\",\n          className,\n        )}\n      >\n        <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  if (!metadata?.image) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-md\",\n          className,\n        )}\n      >\n        <ImageIcon className=\"h-6 w-6 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <OptimizedImage\n      src={metadata.image}\n      alt={alt || metadata.name || \"NFT\"}\n      className={cn(\"object-cover rounded-md\", className)}\n      lazy={true}\n      fallbackSrc=\"/placeholder-nft.png\"\n    />\n  );\n};\n\nexport const NFTImage: React.FC<NFTImageProps> = (props) => {\n  return (\n    <APIErrorBoundary\n      onRetry={() => window.location.reload()}\n      className=\"inline-block\"\n    >\n      <NFTImageContent {...props} />\n    </APIErrorBoundary>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/nft/nft-img.tsx"
    }
  ]
}