{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "send-token",
  "type": "registry:ui",
  "title": "Send Token",
  "description": "A form component for sending SPL tokens on Solana with validation and transaction handling.",
  "dependencies": [
    "@solana/web3.js",
    "@solana/wallet-adapter-react",
    "@solana/spl-token",
    "@solana/spl-token-registry",
    "react-hook-form",
    "sonner",
    "lucide-react"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/button.json",
    "http://localhost:3000/r/input.json",
    "http://localhost:3000/r/wallet-connect-button.json",
    "http://localhost:3000/r/select.json",
    "http://localhost:3000/r/form.json",
    "http://localhost:3000/r/card.json",
    "http://localhost:3000/r/utils.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/token/send-token.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"sonner\";\nimport { ArrowRight, Loader2, Wallet } from \"lucide-react\";\nimport {\n  PublicKey,\n  Transaction,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\nimport { useWallet, useConnection } from \"@solana/wallet-adapter-react\";\nimport {\n  createTransferInstruction,\n  getAssociatedTokenAddress,\n} from \"@solana/spl-token\";\nimport {\n  TokenListProvider,\n  TokenInfo as RegistryTokenInfo,\n} from \"@solana/spl-token-registry\";\n\nimport { Button } from \"@/components/soldevkit-ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/soldevkit-ui/form\";\nimport { Input } from \"@/components/soldevkit-ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n} from \"@/components/soldevkit-ui/select\";\nimport { WalletConnectButton } from \"@/components/soldevkit-ui/wallet/wallet-connect-button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/soldevkit-ui/card\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\n// Type for our form values\ntype FormValues = {\n  destination: string;\n  amount: number | undefined;\n  token: string;\n};\n\n// Custom token info type\nexport type TokenInfo = {\n  id: string;\n  symbol: string;\n  name: string;\n  balance: number;\n  decimals: number;\n  mintAddress?: string;\n  icon?: string;\n};\n\n// Type for form validation errors\ntype FormError = {\n  type: string;\n  message: string;\n};\n\n// Type for resolver return value\ntype ResolverResult = {\n  values: FormValues | Record<string, never>;\n  errors: Record<string, FormError>;\n};\n\n// Custom resolver for form validation\nconst customResolver = (data: FormValues): ResolverResult => {\n  const errors: Record<string, FormError> = {};\n\n  if (!data.destination) {\n    errors.destination = {\n      type: \"required\",\n      message: \"Destination address is required\",\n    };\n  } else if (data.destination.length < 32) {\n    errors.destination = {\n      type: \"minLength\",\n      message: \"Destination address must be a valid Solana address\",\n    };\n  }\n\n  if (data.amount === undefined || data.amount === null) {\n    errors.amount = {\n      type: \"required\",\n      message: \"Amount is required\",\n    };\n  } else if (data.amount <= 0) {\n    errors.amount = {\n      type: \"min\",\n      message: \"Amount must be greater than 0\",\n    };\n  }\n\n  if (!data.token) {\n    errors.token = {\n      type: \"required\",\n      message: \"Please select a token\",\n    };\n  }\n\n  return {\n    values: Object.keys(errors).length === 0 ? data : {},\n    errors,\n  };\n};\n\nexport interface SendTokenFormProps {\n  onSendToken?: (values: FormValues) => Promise<void>;\n  tokens?: TokenInfo[];\n  isLoading?: boolean;\n  showTokenBalance?: boolean;\n  validateDestination?: (address: string) => Promise<boolean>;\n  className?: string;\n}\n\nexport function SendTokenForm({\n  tokens,\n  isLoading = false,\n  showTokenBalance = true,\n  className,\n}: SendTokenFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedToken, setSelectedToken] = useState<TokenInfo | null>(null);\n  const [isLoadingTokens, setIsLoadingTokens] = useState(false);\n  const [isUpdatingBalance] = useState(false);\n  const { publicKey, connected, sendTransaction } = useWallet();\n  const { connection } = useConnection();\n  const [amountValue, setAmountValue] = useState<string>(\"\");\n\n  const form = useForm<FormValues>({\n    defaultValues: {\n      destination: \"\",\n      amount: undefined,\n      token: \"\",\n    },\n    resolver: customResolver,\n  });\n\n  const [availableTokens, setAvailableTokens] = useState<TokenInfo[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, RegistryTokenInfo>>(\n    new Map(),\n  );\n\n  // Load token registry once\n  useEffect(() => {\n    new TokenListProvider().resolve().then((tokens) => {\n      const tokenList = tokens.filterByChainId(101).getList(); // 101 = mainnet-beta\n      const map = new Map(tokenList.map((t) => [t.address, t]));\n      setTokenMap(map);\n    });\n  }, []);\n\n  const networkName = useMemo(() => {\n    if (!connection) return \"Unknown\";\n    const endpoint = connection.rpcEndpoint;\n    if (endpoint.includes(\"devnet\")) return \"Devnet\";\n    if (endpoint.includes(\"testnet\")) return \"Testnet\";\n    if (endpoint.includes(\"mainnet\")) return \"Mainnet\";\n    if (endpoint.includes(\"localhost\") || endpoint.includes(\"127.0.0.1\"))\n      return \"Localnet\";\n    const url = new URL(endpoint);\n    return url.hostname;\n  }, [connection]);\n\n  // Fetch token accounts\n  const fetchTokenAccounts = useCallback(\n    async (ownerPublicKey: PublicKey) => {\n      try {\n        setIsLoadingTokens(true);\n\n        let solBalance = 0;\n        try {\n          solBalance =\n            (await connection.getBalance(ownerPublicKey)) / LAMPORTS_PER_SOL;\n        } catch (error) {\n          console.error(\"Error fetching SOL balance:\", error);\n        }\n\n        const defaultTokens: TokenInfo[] = [\n          {\n            id: \"sol\",\n            symbol: \"SOL\",\n            name: \"Solana\",\n            balance: solBalance,\n            decimals: 9,\n            mintAddress: \"So11111111111111111111111111111111111111112\",\n            icon: \"/logo/solana-logo.svg\",\n          },\n        ];\n\n        const splTokens: TokenInfo[] = [];\n        try {\n          const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n            ownerPublicKey,\n            {\n              programId: new PublicKey(\n                \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n              ),\n            },\n          );\n\n          for (const account of tokenAccounts.value) {\n            const accountData = account.account.data.parsed.info;\n            const mintAddress = accountData.mint;\n            const tokenAmount = accountData.tokenAmount;\n\n            if (tokenAmount.uiAmount > 0) {\n              const registryInfo = tokenMap.get(mintAddress);\n\n              splTokens.push({\n                id: mintAddress,\n                symbol:\n                  registryInfo?.symbol || mintAddress.substring(0, 4) + \"...\",\n                name:\n                  registryInfo?.name || \"Token \" + mintAddress.substring(0, 6),\n                balance: tokenAmount.uiAmount,\n                decimals: tokenAmount.decimals,\n                mintAddress: mintAddress,\n                icon: registryInfo?.logoURI,\n              });\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching SPL token accounts:\", error);\n        }\n\n        return [...defaultTokens, ...splTokens];\n      } catch (error) {\n        console.error(\"Error fetching token accounts:\", error);\n        return [\n          {\n            id: \"sol\",\n            symbol: \"SOL\",\n            name: \"Solana\",\n            balance: 0,\n            decimals: 9,\n            icon: \"/crypto-logos/solana-logo.svg\",\n          },\n        ];\n      } finally {\n        setIsLoadingTokens(false);\n      }\n    },\n    [connection, tokenMap],\n  );\n\n  useEffect(() => {\n    if (tokens) {\n      setAvailableTokens(tokens);\n    } else if (connected && publicKey) {\n      fetchTokenAccounts(publicKey)\n        .then((fetchedTokens) => {\n          setAvailableTokens(fetchedTokens);\n        })\n        .catch((error) => {\n          console.error(\"Error setting tokens:\", error);\n          setAvailableTokens([\n            {\n              id: \"sol\",\n              symbol: \"SOL\",\n              name: \"Solana\",\n              balance: 0,\n              decimals: 9,\n              icon: \"/crypto-logos/solana-logo.svg\",\n            },\n          ]);\n        });\n    }\n  }, [tokens, connected, publicKey, tokenMap, fetchTokenAccounts]);\n\n  // âœ… Add back handleSubmit\n  async function handleSubmit(values: FormValues) {\n    if (!connected || !publicKey || !connection) {\n      toast.error(\"Wallet not connected\", {\n        description: \"Please connect your wallet to send tokens\",\n      });\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n\n      const destinationPubkey = new PublicKey(values.destination);\n      const selectedTokenInfo = availableTokens.find(\n        (t) => t.id === values.token,\n      );\n\n      if (!selectedTokenInfo || values.amount === undefined) {\n        throw new Error(\"Invalid token or amount\");\n      }\n\n      const transaction = new Transaction();\n\n      if (values.token === \"sol\") {\n        transaction.add(\n          SystemProgram.transfer({\n            fromPubkey: publicKey,\n            toPubkey: destinationPubkey,\n            lamports: Math.floor(values.amount * LAMPORTS_PER_SOL),\n          }),\n        );\n      } else if (selectedTokenInfo.mintAddress) {\n        const mintPubkey = new PublicKey(selectedTokenInfo.mintAddress);\n        const senderATA = await getAssociatedTokenAddress(\n          mintPubkey,\n          publicKey,\n        );\n        const receiverATA = await getAssociatedTokenAddress(\n          mintPubkey,\n          destinationPubkey,\n        );\n\n        transaction.add(\n          createTransferInstruction(\n            senderATA,\n            receiverATA,\n            publicKey,\n            Math.floor(\n              values.amount * Math.pow(10, selectedTokenInfo.decimals),\n            ),\n          ),\n        );\n      }\n\n      const { blockhash } = await connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = publicKey;\n\n      const signature = await sendTransaction(transaction, connection);\n\n      toast.success(\"Transaction sent\", {\n        description: `Signature: ${signature}`,\n      });\n    } catch (error) {\n      console.error(\"Transaction error:\", error);\n      toast.error(\"Transaction failed\", {\n        description:\n          error instanceof Error ? error.message : \"Unknown error occurred\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  const handleTokenChange = (value: string) => {\n    const token = availableTokens.find((t) => t.id === value);\n    if (token) {\n      setSelectedToken(token);\n      form.setValue(\"token\", value);\n    }\n  };\n\n  const renderTokenItem = (token: TokenInfo) => (\n    <SelectItem key={token.id} value={token.id}>\n      <div className=\"flex items-center justify-between w-full\">\n        <div className=\"flex items-center\">\n          {token.icon && (\n            <div className=\"w-5 h-5 mr-2 rounded-full overflow-hidden flex items-center justify-center\">\n              <OptimizedImage\n                src={token.icon || \"/placeholder.svg\"}\n                alt={token.symbol}\n                className=\"w-4 h-4 object-contain\"\n                fallbackSrc=\"/placeholder.svg\"\n                lazy={false}\n              />\n            </div>\n          )}\n          <span>{token.symbol}</span>\n        </div>\n        {showTokenBalance && (\n          <span className=\"text-muted-foreground ml-2 text-sm\">\n            {token.balance.toLocaleString(undefined, {\n              minimumFractionDigits: 0,\n              maximumFractionDigits: token.decimals > 6 ? 6 : token.decimals,\n            })}\n          </span>\n        )}\n      </div>\n    </SelectItem>\n  );\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Wallet className=\"h-5 w-5 mr-2\" />\n          Send Tokens\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={(e) => e.preventDefault()} className=\"space-y-6\">\n            {/* Destination */}\n            <FormField\n              control={form.control}\n              name=\"destination\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Destination Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Enter wallet address\"\n                      {...field}\n                      disabled={!connected}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Token + Amount */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"token\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Token</FormLabel>\n                    <Select\n                      onValueChange={handleTokenChange}\n                      defaultValue={field.value}\n                      disabled={!connected}\n                    >\n                      <FormControl>\n                        <SelectTrigger className=\"w-full min-w-[180px]\">\n                          <SelectValue\n                            placeholder={\n                              isLoadingTokens || isUpdatingBalance\n                                ? \"Loading tokens...\"\n                                : \"Select a token\"\n                            }\n                          />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {isLoadingTokens || isUpdatingBalance ? (\n                          <div className=\"flex items-center justify-center p-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                            <span>\n                              {isUpdatingBalance\n                                ? \"Updating balances...\"\n                                : \"Loading tokens...\"}\n                            </span>\n                          </div>\n                        ) : availableTokens.length > 0 ? (\n                          <SelectGroup>\n                            {availableTokens.map(renderTokenItem)}\n                          </SelectGroup>\n                        ) : (\n                          <div className=\"p-2 text-muted-foreground text-center\">\n                            No tokens found\n                          </div>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Amount</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0.0\"\n                        step=\"any\"\n                        value={amountValue}\n                        onChange={(e) => {\n                          setAmountValue(e.target.value);\n                          field.onChange(\n                            e.target.value === \"\"\n                              ? undefined\n                              : Number.parseFloat(e.target.value),\n                          );\n                        }}\n                        disabled={!connected}\n                      />\n                    </FormControl>\n                    {selectedToken && showTokenBalance && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Available:{\" \"}\n                        {selectedToken.balance.toLocaleString(undefined, {\n                          minimumFractionDigits: 0,\n                          maximumFractionDigits:\n                            selectedToken.decimals > 6\n                              ? 6\n                              : selectedToken.decimals,\n                        })}{\" \"}\n                        {selectedToken.symbol}\n                      </p>\n                    )}\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Submit */}\n            {connected ? (\n              <Button\n                type=\"button\"\n                onClick={() => form.handleSubmit(handleSubmit)()}\n                className=\"w-full\"\n                disabled={isSubmitting || isLoading || isLoadingTokens}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Processing Transaction...\n                  </>\n                ) : (\n                  <>\n                    Send Tokens\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            ) : (\n              <WalletConnectButton className=\"w-full\">\n                Connect Wallet\n              </WalletConnectButton>\n            )}\n\n            {/* Network */}\n            {connected && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                  <span>Network</span>\n                  <span className=\"font-medium bg-muted px-2 py-1 rounded\">\n                    {networkName}\n                  </span>\n                </div>\n              </div>\n            )}\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/token/send-token.tsx"
    }
  ]
}