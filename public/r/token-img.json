{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-img",
  "type": "registry:ui",
  "title": "Token Image",
  "description": "A component for displaying token images with loading states and fallback handling using Jupiter's token list.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://soldevkit.com/r/utils.json",
    "https://soldevkit.com/r/error-boundary.json",
    "https://soldevkit.com/r/optimized-image.json"
  ],
  "files": [
    {
      "path": "src/registry/default/ui/token/token-img.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { cn, findToken, type TokenInfo } from \"@/lib/utils\";\nimport { Loader2, Image as ImageIcon } from \"lucide-react\";\nimport { APIErrorBoundary } from \"@/components/soldevkit-ui/error-boundary/error-boundary\";\nimport { OptimizedImage } from \"@/components/soldevkit-ui/optimized-image/optimized-image\";\n\ninterface TokenImageProps {\n  /** Token address or symbol */\n  tokenAddressOrSymbol: string;\n  /** Custom CSS classes */\n  className?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Loading state */\n  isLoading?: boolean;\n  /** Size of the image (default: 32px) */\n  size?: number;\n}\n\nconst TokenImageContent: React.FC<TokenImageProps> = ({\n  tokenAddressOrSymbol,\n  className,\n  alt,\n  isLoading: externalLoading = false,\n  size = 32,\n}) => {\n  const [token, setToken] = useState<TokenInfo | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchTokenData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const found = await findToken(tokenAddressOrSymbol);\n      setToken(found);\n    } catch (error) {\n      console.error(\"Error fetching token metadata:\", error);\n      setError(error instanceof Error ? error.message : \"Failed to load token\");\n      setToken(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [tokenAddressOrSymbol]);\n\n  useEffect(() => {\n    if (tokenAddressOrSymbol) {\n      fetchTokenData();\n    }\n  }, [tokenAddressOrSymbol, fetchTokenData]);\n\n  const isLoading = externalLoading || loading;\n\n  if (isLoading) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-full\",\n          className,\n        )}\n        style={{ width: size, height: size }}\n      >\n        <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  if (!token?.logoURI) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center bg-muted rounded-full\",\n          className,\n        )}\n        style={{ width: size, height: size }}\n      >\n        <ImageIcon className=\"h-4 w-4 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <OptimizedImage\n      src={token.logoURI}\n      alt={alt || token.symbol}\n      className={cn(\"rounded-full object-contain\", className)}\n      width={size}\n      height={size}\n      lazy={true}\n      fallbackSrc=\"/placeholder-token.png\"\n    />\n  );\n};\n\nexport const TokenImage: React.FC<TokenImageProps> = (props) => {\n  return (\n    <APIErrorBoundary\n      onRetry={() => window.location.reload()}\n      className=\"inline-block\"\n    >\n      <TokenImageContent {...props} />\n    </APIErrorBoundary>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/token/token-img.tsx"
    }
  ]
}