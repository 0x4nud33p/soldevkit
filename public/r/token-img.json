{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-img",
  "type": "registry:ui",
  "title": "Token Image",
  "description": "A component for displaying token images with loading states and fallback handling using Jupiter's token list.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/default/ui/token/token-img.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Loader2, Image as ImageIcon } from \"lucide-react\";\n\nexport interface TokenImageProps {\n  /** The token mint address or symbol */\n  tokenAddressOrSymbol: string;\n  /** Custom CSS classes */\n  className?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Loading state */\n  isLoading?: boolean;\n  /** Size of the image (default: 32px) */\n  size?: number;\n}\n\ntype TokenInfo = {\n  address: string;\n  name: string;\n  symbol: string;\n  logoURI?: string;\n  decimals: number;\n};\n\nexport const TokenImage: React.FC<TokenImageProps> = ({\n  tokenAddressOrSymbol,\n  className,\n  alt,\n  isLoading: externalLoading = false,\n  size = 32,\n}) => {\n  const [token, setToken] = useState<TokenInfo | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(\n          \"https://tokens.jup.ag/tokens?tags=verified\",\n        );\n        const data: TokenInfo[] = await response.json();\n\n        // Try to find by address or symbol\n        const found = data.find(\n          (t) =>\n            t.address.toLowerCase() === tokenAddressOrSymbol.toLowerCase() ||\n            t.symbol.toLowerCase() === tokenAddressOrSymbol.toLowerCase(),\n        );\n\n        setToken(found || null);\n      } catch (error) {\n        console.error(\"Error fetching token metadata:\", error);\n        setToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (tokenAddressOrSymbol) {\n      fetchToken();\n    }\n  }, [tokenAddressOrSymbol]);\n\n  const isLoading = externalLoading || loading;\n\n  if (isLoading) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-muted rounded-full ${className}`}\n        style={{ width: size, height: size }}\n      >\n        <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (!token?.logoURI) {\n    return (\n      <div\n        className={`flex items-center justify-center bg-muted rounded-full ${className}`}\n        style={{ width: size, height: size }}\n      >\n        <ImageIcon className=\"h-4 w-4 text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <img\n      src={token.logoURI}\n      alt={alt || token.symbol}\n      className={`rounded-full object-contain ${className}`}\n      style={{ width: size, height: size }}\n      loading=\"lazy\"\n    />\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/soldevkit-ui/token/token-img.tsx"
    }
  ]
}